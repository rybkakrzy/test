// ‚öôÔ∏è Zmienne
$grid-columns: 12;

$grid-gutters: (
  xs: 4px,
  sm: 8px,
  md: 16px,
  lg: 24px
);

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// ‚úÖ ROW
.row {
  display: flex;
  flex-wrap: wrap;

  $default-gutter: map-get($grid-gutters, md);
  margin-left: -$default-gutter / 2;
  margin-right: -$default-gutter / 2;

  > [class*="col-"] {
    padding-left: $default-gutter / 2;
    padding-right: $default-gutter / 2;
  }
}

// ‚úÖ GAP VARIANTS
@each $size, $gap in $grid-gutters {
  .gap-#{$size} {
    margin-left: -$gap / 2;
    margin-right: -$gap / 2;

    > [class*="col-"] {
      padding-left: $gap / 2;
      padding-right: $gap / 2;
    }
  }
}

// ‚úÖ NO-GUTTERS
.no-gutters {
  margin-left: 0;
  margin-right: 0;

  > [class*="col-"] {
    padding-left: 0;
    padding-right: 0;
  }
}

// ‚úÖ Kolumny (dla fallback√≥w lub kiedy nie podano rozmiaru)
[class*="col-"] {
  flex: 1 0 0%;
  min-width: 0;
}

// ‚úÖ Kolumny i offsety per breakpoint
@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{($i / $grid-columns) * 100}%;
        max-width: #{($i / $grid-columns) * 100}%;
      }

      @if $i < $grid-columns {
        .offset-#{$breakpoint}-#{$i} {
          margin-left: #{($i / $grid-columns) * 100}%;
        }
      }
    }
  }
}


-------------

// üìè Kolumny i breakpointy
$grid-columns: 12;

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// üîß Gutter domy≈õlny
$gutter-x: 16px;

// ‚úÖ Globalny box-sizing
*,
*::before,
*::after {
  box-sizing: border-box;
}

// üß± ROW
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -($gutter-x / 2);
  margin-right: -($gutter-x / 2);
}

// üì¶ Bazowa kolumna
[class*="col-"] {
  padding-left: $gutter-x / 2;
  padding-right: $gutter-x / 2;
}

// üìê Kolumny na breakpointach
@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{($i / $grid-columns) * 100}%;
        max-width: #{($i / $grid-columns) * 100}%;
      }
    }
  }
}



// Breakpointy (zgodne z Bootstrap)
$container-breakpoints: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

// Podstawowy container ‚Äì zawsze 100%
.container {
  width: 100%;
  padding-left: 16px;
  padding-right: 16px;
  margin-left: auto;
  margin-right: auto;

  // Maksymalne szeroko≈õci kontener√≥w dla r√≥≈ºnych breakpoint√≥w
  @each $breakpoint, $max-width in $container-breakpoints {
    @media (min-width: #{strip-unit($max-width) + 60}px) {
      max-width: $max-width;
    }
  }
}

// Dodatkowo: kontenery specyficzne dla danego breakpointu (opcjonalnie)
@each $breakpoint, $max-width in $container-breakpoints {
  .container-#{$breakpoint} {
    width: 100%;
    max-width: $max-width;
    padding-left: 16px;
    padding-right: 16px;
    margin-left: auto;
    margin-right: auto;
  }
}





// ----------------------
// Konfiguracja
// ----------------------

$grid-columns: 12;

$grid-gutters: (
  xs: 4px,
  sm: 8px,
  md: 16px,
  lg: 24px
);

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// ----------------------
// ROW
// ----------------------

.row {
  display: flex;
  flex-wrap: wrap;

  // Domy≈õlny gutter (md)
  $default-gutter: map-get($grid-gutters, md);
  margin-left: -$default-gutter / 2;
  margin-right: -$default-gutter / 2;

  > [class*="col-"] {
    padding-left: $default-gutter / 2;
    padding-right: $default-gutter / 2;
  }

  // Gaps
  @each $size, $gap in $grid-gutters {
    &.gap-#{$size} {
      margin-left: -$gap / 2;
      margin-right: -$gap / 2;

      > [class*="col-"] {
        padding-left: $gap / 2;
        padding-right: $gap / 2;
      }
    }
  }

  // No-gutters
  &.no-gutters {
    margin-left: 0;
    margin-right: 0;

    > [class*="col-"] {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

// ----------------------
// COL ‚Äì full width base
// ----------------------

[class*="col-"] {
  width: 100%;
}

// ----------------------
// COL and OFFSET per breakpoint
// ----------------------

@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{($i / $grid-columns) * 100}%;
        max-width: #{($i / $grid-columns) * 100}%;
      }

      @if $i < $grid-columns {
        .offset-#{$breakpoint}-#{$i} {
          margin-left: #{($i / $grid-columns) * 100%};
        }
      }
    }
  }
}




// ‚öôÔ∏è Konfiguracja
$grid-columns: 12;

$grid-gutters: (
  xs: 4px,
  sm: 8px,
  md: 16px,
  lg: 24px
);

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// üì¶ ROW
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -($gutter: map-get($grid-gutters, md)) / 2;
  margin-right: -($gutter: map-get($grid-gutters, md)) / 2;

  // gap-y i gap-x
  @each $size, $gap in $grid-gutters {
    &.gap-#{$size} {
      margin-left: -$gap / 2;
      margin-right: -$gap / 2;

      > [class*="col-"] {
        padding-left: $gap / 2;
        padding-right: $gap / 2;
      }
    }
  }

  // no-gutters = 0 padding
  &.no-gutters {
    margin-left: 0;
    margin-right: 0;

    > [class*="col-"] {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

// üß± COL - podstawowy (100% szeroko≈õci)
[class*="col-"] {
  width: 100%;
  padding-left: map-get($grid-gutters, md) / 2;
  padding-right: map-get($grid-gutters, md) / 2;
}

// üìê Kolumny i offsety dla ka≈ºdego breakpointu
@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      // col-[breakpoint]-[i]
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{($i / $grid-columns) * 100}%;
        max-width: #{($i / $grid-columns) * 100}%;
      }

      // offset-[breakpoint]-[i]
      @if $i < $grid-columns {
        .offset-#{$breakpoint}-#{$i} {
          margin-left: #{($i / $grid-columns) * 100}%;
        }
      }
    }
  }
}




$button-colors: (
  orange: #e4572e,
  navy: #2f3b94,
  blue: #3e8ed0,
  grey: #666
);

$button-sizes: (
  12: 12px,
  14: 14px,
  16: 16px,
  19: 19px
);

// Wsp√≥lna baza przycisku
.button-base {
  padding: 0.4em 1em;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  display: inline-block;
  text-align: center;

  &.disabled,
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }

  // Rozmiary
  @each $size, $font-size in $button-sizes {
    &.size-#{$size} {
      font-size: $font-size;
    }
  }
}

// FILL buttons
@each $name, $color in $button-colors {
  .button-fill-#{quote($name)} {
    @extend .button-base;
    background-color: $color;
    color: white;

    &:hover {
      filter: brightness(0.9);
    }
  }
}

// OUTLINE buttons
@each $name, $color in $button-colors {
  .button-outline-#{quote($name)} {
    @extend .button-base;
    background-color: transparent;
    border: 2px solid $color;
    color: $color;

    &:hover {
      background-color: $color;
      color: white;
    }
  }
}

// TEXT buttons
@each $name, $color in $button-colors {
  .button-text-#{quote($name)} {
    @extend .button-base;
    background-color: transparent;
    color: $color;
    border: none;

    &:hover {
      background-color: rgba($color, 0.1);
    }
  }
}


$button-colors: (
  orange: #e4572e,
  navy: #2f3b94,
  blue: #3e8ed0,
  grey: #666
);

$button-sizes: (
  12: 12px,
  14: 14px,
  16: 16px,
  19: 19px
);

// üß± Wsp√≥lna podstawa
.button-base {
  padding: 0.4em 1em;
  border: none;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  display: inline-block;
  text-align: center;

  &.disabled,
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }

  // Rozmiary
  @each $size, $font-size in $button-sizes {
    &.size-#{$size} {
      font-size: $font-size;
    }
  }
}

// üé® Wariant FILL
@each $name, $color in $button-colors {
  .button-fill-#{$name} {
    @extend .button-base;
    background-color: $color;
    color: white;

    &:hover {
      filter: brightness(0.9);
    }
  }
}

// ‚úèÔ∏è Wariant TEXT
@each $name, $color in $button-colors {
  .button-text-#{$name} {
    @extend .button-base;
    background-color: transparent;
    color: $color;

    &:hover {
      background-color: rgba($color, 0.1);
    }
  }
}



$button-heights: (
  12: 28px,
  14: 32px,
  16: 36px,
  19: 44px
);

.button-outline {
  border: 2px solid transparent;
  background-color: transparent;
  padding: 0 1em; // poziome tylko, brak pionowego
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;

  // Wymuszamy wysoko≈õƒá przez flexbox + height
  @each $size, $height in $button-heights {
    &.size-#{$size} {
      font-size: #{$size}px;
      height: $height;
    }
  }

  // Kolory (przyk≈Çad z poprzedniego SCSS)
  @each $name, $color in $button-colors {
    &.outline-#{$name} {
      color: $color;
      border-color: $color;

      &:hover {
        background-color: $color;
        color: white;
      }
    }
  }

  // Styl dla przycisk√≥w nieaktywnych
  &.disabled,
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }
}

@import 'path/to/file'; // bez .scss
// ---------------------------------------------
// Base Colors
// ---------------------------------------------
$white:       #ffffff;
$black:       #0d0b04;

$grey-01:     #f3f4f1;
$grey-02:     #a6a99b;
$grey-03:     #40383b;
$grey-04:     #111210;

// ---------------------------------------------
// Accent Colors with Opacities
// ---------------------------------------------

$violet-10:   #f1e9ff; // 10% opacity
$violet-50:   #d5beff; // 50% opacity
$violet:      #7724ff;
$violet-150:  #3c1280;

$sky-10:      #e4f5ff; // 10%
$sky-50:      #bee8fe; // 50%
$sky:         #89d5fd;
$sky-150:     #2585a7b;

$maroon-10:   #f8e6f5; // 10%
$maroon-50:   #ff90c7; // 50%
$maroon:      #4d0020;
$maroon-150:  #340016;

$raspberry-50:#f86bd5; // 50%
$raspberry:   #d40199;
$raspberry-150: #bf096a;

$blush-50:    #fabefe;
$blush:       #f689fd;
$blush-150:   #be0cb3;

$sun-10:      #ffecf5; // 10%
$sun-50:      #ffee73;
$sun:         #ffe100;
$sun-150:     #aa8500;

// ---------------------------------------------
// Functional Colors
// ---------------------------------------------

$green-01:    #cdf4d8;
$green-02:    #65ff59;
$green-03:    #128f00;
$red:         #ce2323;



// Mapa kolor√≥w ‚Äì ≈Çatwa rozbudowa
$button-colors: (
  orange: #e4572e,
  blue: #3e8ed0,
  navy: #2f3b94,
  gray: #666
);

// Mapa rozmiar√≥w
$button-sizes: (
  12: 12px,
  14: 14px,
  16: 16px,
  19: 19px
);

.button-outline {
  border: 2px solid transparent;
  background-color: transparent;
  padding: 0.4em 1em;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  display: inline-block;

  // Generowanie klas kolor√≥w
  @each $name, $color in $button-colors {
    &.outline-#{$name} {
      color: $color;
      border-color: $color;

      &:hover {
        background-color: $color;
        color: white;
      }
    }
  }

  // Generowanie klas rozmiar√≥w
  @each $size, $font-size in $button-sizes {
    &.size-#{$size} {
      font-size: $font-size;
    }
  }

  // Opcjonalnie: disabled
  &.disabled,
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }
}




// Container for rows ‚Äì flex-based layout
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -8px;
  margin-right: -8px;
}

// Base style for every column
.col {
  padding: 8px;
  box-sizing: border-box;
}

// Fixed 12-column grid system (percent-based widths)
.col-1  { flex: 0 0 8.3333%;  max-width: 8.3333%; }
.col-2  { flex: 0 0 16.6667%; max-width: 16.6667%; }
.col-3  { flex: 0 0 25%;      max-width: 25%; }
.col-4  { flex: 0 0 33.3333%; max-width: 33.3333%; }
.col-5  { flex: 0 0 41.6667%; max-width: 41.6667%; }
.col-6  { flex: 0 0 50%;      max-width: 50%; }
.col-7  { flex: 0 0 58.3333%; max-width: 58.3333%; }
.col-8  { flex: 0 0 66.6667%; max-width: 66.6667%; }
.col-9  { flex: 0 0 75%;      max-width: 75%; }
.col-10 { flex: 0 0 83.3333%; max-width: 83.3333%; }
.col-11 { flex: 0 0 91.6667%; max-width: 91.6667%; }
.col-12 { flex: 0 0 100%;     max-width: 100%; }


// Main row class using Flexbox
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -8px;
  margin-right: -8px;
}

// Column with padding and flexible sizing
.col {
  padding: 8px;
  box-sizing: border-box;
  flex-grow: 1;
}

// Example column width classes (12-column system)
@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 #{($i / 12) * 100}%;
    max-width: #{($i / 12) * 100}%;
  }
}




import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-dynamic-control',
  templateUrl: './dynamic-control.component.html',
})
export class DynamicControlComponent {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      name: ['', Validators.required],
      provideDetails: [false]
    });

    this.form.get('provideDetails')?.valueChanges.subscribe((checked: boolean) => {
      if (checked) {
        this.addDetailsGroup();
      } else {
        this.removeDetailsGroup();
      }
    });
  }

  private addDetailsGroup(): void {
    if (!this.form.contains('details')) {
      const detailsGroup = this.fb.group({
        age: [null, [Validators.required, Validators.min(0)]],
        address: ['', Validators.required]
      });

      this.form.addControl('details', detailsGroup);
    }
  }

  private removeDetailsGroup(): void {
    if (this.form.contains('details')) {
      this.form.removeControl('details');
    }
  }

  onSubmit(): void {
    if (this.form.valid) {
      console.log('Form value:', this.form.value);
    } else {
      this.form.markAllAsTouched();
    }
  }
}


<!-- Wy≈õwietl dodatkowe pola, je≈õli grupa "details" zosta≈Ça dodana -->
<div *ngIf="form.contains('details')" [formGroupName]="'details'">
  <label>
    Wiek:
    <input type="number" formControlName="age">
  </label>

  <label>
    Adres:
    <input type="text" formControlName="address">
  </label>
</div>
