 Zmiany w logice (zrobione)
Model MKBComponent zawiera teraz:

name: string â€“ identyfikator komponentu,

value: string â€“ wartoÅ›Ä‡ wpisana przez uÅ¼ytkownika,

selected: boolean â€“ czy checkbox zaznaczony.

Dane z backendu sÄ… zaczytywane, jeÅ›li istniejÄ… (this.data.wyciag?.components), inaczej uÅ¼ywane sÄ… domyÅ›lne tytuÅ‚y.

FormGroup dla kaÅ¼dego skÅ‚adnika budowany z name, value, selected.

updateDataFromForm() uwzglÄ™dnia components przy serializacji danych do API.

ðŸ›  Co musisz jeszcze dodaÄ‡ w HTML?
W client-contracts.component.html, w sekcji MKB, dodaj:

html
Kopiuj
Edytuj
<div *ngIf="isOptionEnabled('MKB')">
  <h4>Na wierzytelnoÅ›Ä‡ skÅ‚ada siÄ™:</h4>
  <div formArrayName="components">
    <div *ngFor="let group of getMKBComponents().controls; let i = index" [formGroupName]="i" class="flex gap-2 items-center mb-2">
      <input type="checkbox" formControlName="selected" />
      <input type="text" formControlName="value" [placeholder]="group.get('name')?.value" class="flex-1" />
    </div>
  </div>
</div>
ðŸ§± Model C# po stronie backendu
W DTO zdefiniuj:

csharp
Kopiuj
Edytuj
public class MKBComponentDto
{
    public string Name { get; set; }
    public string? Value { get; set; }
    public bool Selected { get; set; }
}

public class WyciagDetail
{
    public string BookNumber { get; set; }
    public List<MKBComponentDto> Components { get; set; }
}


-----------------



// ===============================
// client-contracts.component.ts
// ===============================

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';
import { ClientService } from './client.service';
import { CmkowirBGKModel, DocumentFormDetail, WyciagDetail, BGKDocumentType, MKBComponent } from './models';

@Component({
  selector: 'app-client-contracts',
  templateUrl: './client-contracts.component.html',
  styleUrls: ['./client-contracts.component.scss']
})
export class ClientContractsComponent implements OnInit {
  data!: CmkowirBGKModel;
  formGroup!: FormGroup;
  selectedContractIndex = -1;
  readonly optionKeys: BGKDocumentType[] = [
    'StatementListESignatures',
    'StatementListESignaturesBillOfExchange',
    'MKB'
  ];

  collapsedAnnexes: { [key: string]: boolean[] } = {};

  readonly defaultMKBItems: MKBComponent[] = [
    { name: 'KapitaÅ‚' },
    { name: 'Odsetki umowne' },
    { name: 'Odsetki karne' },
    { name: 'Koszty windykacyjne' }
  ];

  constructor(private clientService: ClientService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.clientService.getClientData().subscribe(data => {
      this.data = data;

      const contractIndex = this.data.contracts.findIndex(
        c => c.contractNumber === this.data.selectedContract?.contractNumber
      );
      this.selectedContractIndex = contractIndex >= 0 ? contractIndex : -1;

      this.initForm();
    });
  }

  initForm(): void {
    const componentsSource = this.data.wyciag?.components?.length
      ? this.data.wyciag.components
      : this.defaultMKBItems;

    this.formGroup = this.fb.group({
      options: this.fb.group({
        StatementListESignatures: this.buildOptionFormGroup(this.data.oswiadczenie, 'StatementListESignatures'),
        StatementListESignaturesBillOfExchange: this.buildOptionFormGroup(this.data.oswiadczenieWeksel, 'StatementListESignaturesBillOfExchange'),
        MKB: this.fb.group({
          enabled: [!!this.data.wyciag?.bookNumber],
          bookNumber: [this.data.wyciag?.bookNumber ?? ''],
          components: this.fb.array(componentsSource.map(item => this.createMKBComponent(item)))
        })
      })
    });
  }

  createMKBComponent(item: { name: string; value?: string; selected?: boolean }): FormGroup {
    const group = this.fb.group({
      name: [item.name],
      value: [item.value ?? ''],
      selected: [item.selected ?? !!item.value]
    });

    group.get('value')?.valueChanges.subscribe(val => {
      group.get('selected')?.setValue(!!val, { emitEvent: false });
    });

    return group;
  }

  getMKBComponents(): FormArray {
    return this.formGroup.get(['options', 'MKB', 'components']) as FormArray;
  }

  buildOptionFormGroup(data?: DocumentFormDetail, optionKey?: BGKDocumentType): FormGroup {
    const annexes = (data?.annexes ?? []).map((a, index) => this.createAnnexForm(a, index + 1));
    this.collapsedAnnexes[optionKey!] = annexes.map(() => false);

    return this.fb.group({
      enabled: [!!data],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      }),
      hasAnnexes: [data?.hasAnnexes ?? false],
      annexes: this.fb.array(annexes)
    });
  }

  getDocumentLabel(type: BGKDocumentType): string {
    switch (type) {
      case 'StatementListESignatures':
        return 'OÅ›wiadczenie lista e-podpisÃ³w';
      case 'StatementListESignaturesBillOfExchange':
        return 'OÅ›wiadczenie lista e-podpisÃ³w - Weksel';
      case 'MKB':
        return 'WyciÄ…g z ksiÄ…g banku';
      default:
        return 'Nieznany typ';
    }
  }

  createAnnexForm(data?: any, index?: number): FormGroup {
    return this.fb.group({
      annexNumber: [data?.annexNumber ?? `ANEKS-${index ?? ''}`, Validators.required],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      })
    });
  }

  getAnnexesArray(optionKey: BGKDocumentType): FormArray {
    return this.formGroup.get(['options', optionKey, 'annexes']) as FormArray;
  }

  addAnnex(optionKey: BGKDocumentType): void {
    const annexArray = this.getAnnexesArray(optionKey);
    annexArray.push(this.createAnnexForm(undefined, annexArray.length + 1));
    this.collapsedAnnexes[optionKey].push(false);
  }

  removeAnnex(optionKey: BGKDocumentType, index: number): void {
    const annexArray = this.getAnnexesArray(optionKey);
    annexArray.removeAt(index);
    this.collapsedAnnexes[optionKey].splice(index, 1);

    annexArray.controls.forEach((control, i) => {
      control.get('annexNumber')?.setValue(`ANEKS-${i + 1}`);
    });
  }

  toggleAnnexCollapse(optionKey: BGKDocumentType, index: number): void {
    this.collapsedAnnexes[optionKey][index] = !this.collapsedAnnexes[optionKey][index];
  }

  editAnnex(optionKey: BGKDocumentType, index: number): void {
    const annex = this.getAnnexesArray(optionKey).at(index);
    (annex as any).markAllAsTouched();
  }

  selectContract(index: number): void {
    this.selectedContractIndex = index;
    this.data.selectedContract = this.data.contracts[index];
    this.initForm();
  }

  resetSelectedContract(): void {
    this.selectedContractIndex = -1;
    this.data.selectedContract = undefined;
    this.initForm();
  }

  isOptionEnabled(optionKey: BGKDocumentType): boolean {
    return this.formGroup.get(['options', optionKey, 'enabled'])?.value;
  }

  onDocumentTypeChange(): void {
    const optionsGroup = this.formGroup.get('options') as FormGroup;
    this.data.selectedDocumentTypes = this.optionKeys.filter(key => optionsGroup.get([key, 'enabled'])?.value);
  }

  updateDataFromForm(): void {
    const optionsGroup = this.formGroup.get('options')!.value;

    this.data.oswiadczenie = optionsGroup.StatementListESignatures.enabled ? optionsGroup.StatementListESignatures : undefined;
    this.data.oswiadczenieWeksel = optionsGroup.StatementListESignaturesBillOfExchange.enabled ? optionsGroup.StatementListESignaturesBillOfExchange : undefined;
    this.data.wyciag = optionsGroup.MKB.enabled ? {
      bookNumber: optionsGroup.MKB.bookNumber,
      components: optionsGroup.MKB.components
    } : undefined;

    this.onDocumentTypeChange();
  }

  save(): void {
    this.updateDataFromForm();
    this.clientService.saveData(this.data).subscribe();
  }

  download(): void {
    this.updateDataFromForm();
    this.clientService.downloadDocuments(this.data).subscribe();
  }
}
