/* d2-label-value.component.ts */
import {
  Component,
  Input,
  Inject,
  Optional,
  LOCALE_ID,
} from '@angular/core';
import {
  CurrencyPipe,
  DecimalPipe,
  PercentPipe,
  DatePipe,
  TitleCasePipe,
  UpperCasePipe,
  LowerCasePipe
} from '@angular/common';

@Component({
  selector: 'd2-label-value',
  templateUrl: './d2-label-value.component.html',
  styleUrls: ['./d2-label-value.component.scss'],
  providers: [
    CurrencyPipe,
    DecimalPipe,
    PercentPipe,
    DatePipe,
    TitleCasePipe,
    UpperCasePipe,
    LowerCasePipe
  ]
})
export class D2LabelValueComponent {
  @Input() label?: string;
  @Input() value?: any;
  @Input() whenEmptyShow: string = 'brak warto≈õci';
  @Input() type?: string;
  @Input() pipeArgs?: any[];
  @Input() layout: 'vertical' | 'horizontal' = 'vertical';
  @Input() width: 'auto' | 'half' | 'full' = 'auto';
  @Input() status: 'normal' | 'success' | 'warning' | 'error' | 'custom' = 'normal';
  @Input() color?: string;

  constructor(
    private currencyPipe: CurrencyPipe,
    private decimalPipe: DecimalPipe,
    private percentPipe: PercentPipe,
    private datePipe: DatePipe,
    private titleCasePipe: TitleCasePipe,
    private upperCasePipe: UpperCasePipe,
    private lowerCasePipe: LowerCasePipe,
    @Optional() @Inject(LOCALE_ID) private locale: string
  ) {}

  get displayValue(): string {
    const isEmpty =
      this.value === null ||
      this.value === undefined ||
      (typeof this.value === 'string' && this.value.trim() === '');

    if (isEmpty) {
      return this.whenEmptyShow;
    }

    if (!this.type) {
      return this.value.toString();
    }

    try {
      switch (this.type) {
        case 'currency':
          return this.currencyPipe.transform(this.value, ...this.pipeArgs ?? []) ?? this.whenEmptyShow;
        case 'decimal':
          return this.decimalPipe.transform(this.value, ...this.pipeArgs ?? []) ?? this.whenEmptyShow;
        case 'percent':
          return this.percentPipe.transform(this.value, ...this.pipeArgs ?? []) ?? this.whenEmptyShow;
        case 'date':
          return this.datePipe.transform(this.value, ...this.pipeArgs ?? []) ?? this.whenEmptyShow;
        case 'titlecase':
          return this.titleCasePipe.transform(this.value) ?? this.whenEmptyShow;
        case 'uppercase':
          return this.upperCasePipe.transform(this.value) ?? this.whenEmptyShow;
        case 'lowercase':
          return this.lowerCasePipe.transform(this.value) ?? this.whenEmptyShow;
        default:
          return this.value.toString();
      }
    } catch {
      return this.whenEmptyShow;
    }
  }
}

/* d2-label-value.component.html */
<div class="d2-label-value d2-label-value--{{ layout }} d2-label-value--width-{{ width }}">
  <ng-container *ngIf="layout === 'vertical'">
    <ng-container *ngIf="label">
      <span class="d2-label-value__label">{{ label }}</span>
    </ng-container>
    <span
      class="d2-label-value__value d2-label-value__value--{{ status }}"
      [ngStyle]="status === 'custom' && color ? { color: color } : {}"
      [class.d2-label-value__value--empty]="displayValue === whenEmptyShow"
    >
      {{ displayValue }}
    </span>
  </ng-container>

  <ng-container *ngIf="layout === 'horizontal'">
    <span *ngIf="label" class="d2-label-value__label d2-label-value__label--horizontal">{{ label }}</span>
    <span
      class="d2-label-value__value d2-label-value__value--horizontal d2-label-value__value--{{ status }}"
      [ngStyle]="status === 'custom' && color ? { color: color } : {}"
      [class.d2-label-value__value--empty]="displayValue === whenEmptyShow"
    >
      {{ displayValue }}
    </span>
  </ng-container>
</div>

/* d2-label-value.component.scss */
.d2-label-value {
  &--vertical {
    display: flex;
    flex-direction: column;
  }

  &--horizontal {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 1rem;
  }

  &--width-auto {
    width: auto;
    min-width: 300px;
    max-width: 300px;
  }

  &--width-half {
    width: 50%;
  }

  &--width-full {
    width: 100%;
  }

  &__label {
    font-size: 0.875rem;
    color: #6c757d;
    margin-bottom: 0.25rem;
    line-height: 1.2;

    &--horizontal {
      margin-bottom: 0;
      min-width: 120px;
    }
  }

  &__value {
    font-size: 1.125rem;
    font-weight: 600;
    line-height: 1.3;

    &--empty {
      color: #adb5bd;
      font-style: italic;
      font-weight: normal;
    }

    &--horizontal {
      flex: 1;
    }

    &--normal {
      color: #212529;
    }

    &--success {
      color: #28a745;
    }

    &--warning {
      color: #fd7e14;
    }

    &--error {
      color: #dc3545;
    }
  }
}

/* README.md */
# D2LabelValueComponent

Komponent Angular s≈Çu≈ºƒÖcy do wy≈õwietlania pary **label + warto≈õƒá** z opcjonalnym formatowaniem i obs≈ÇugƒÖ pustych danych.

## üìâ Zastosowanie

Umo≈ºliwia prostƒÖ i estetycznƒÖ prezentacjƒô danych tekstowych, dat, liczb, kwot, itp.

## ‚úÖ Cechy

- Wy≈õwietla label nad warto≈õciƒÖ lub obok niej (konfigurowalne)
- Obs≈Çuguje brak warto≈õci (tekst konfigurowalny)
- Obs≈Çuguje r√≥≈ºne typy danych (`date`, `currency`, `uppercase`, itd.)
- Pozwala przekazaƒá argumenty do formatowania (`pipeArgs`)
- Stylowanie w czystym SCSS, bez zale≈ºno≈õci zewnƒôtrznych
- Parametryzowana szeroko≈õƒá: `auto`, `50%`, `100%`
- Wsparcie dla koloru domy≈õlnego (`status`) lub w≈Çasnego (`color`)

## üîß API

| Input           | Typ                                         | Opis                                                                 |
|----------------|----------------------------------------------|----------------------------------------------------------------------|
| `label`        | `string?`                                    | Etykieta wy≈õwietlana nad lub obok warto≈õci                           |
| `value`        | `any`                                        | Warto≈õƒá do wy≈õwietlenia                                              |
| `type`         | `string?`                                    | Typ formatowania (`date`, `currency`, `uppercase`, itd.)            |
| `pipeArgs`     | `any[]?`                                     | Argumenty przekazywane do pipe'a (np. `['PLN', 'symbol']`)          |
| `whenEmptyShow`| `string`                                     | Tekst wy≈õwietlany, gdy `value` jest puste (`''`, `null`, `undefined`) |
| `layout`       | `'vertical' | 'horizontal'`                   | Okre≈õla uk≈Çad: pionowy (domy≈õlny) lub poziomy                        |
| `width`        | `'auto' | 'half' | 'full'`                    | Szeroko≈õƒá komponentu: automatyczna, 50%, 100%                        |
| `status`       | `'normal' | 'success' | 'warning' | 'error' | 'custom'` | Styl kolorystyczny warto≈õci lub w≈Çasny przez `color`                 |
| `color`        | `string?`                                    | W≈Çasny kolor tekstu (np. `#ff00ff`), aktywowany tylko w `status='custom'` |

## üí° Przyk≈Çady u≈ºycia

```html
<d2-label-value
  label="E-mail"
  [value]="user.email"
  layout="vertical"
  width="auto"
/>

<d2-label-value
  label="Status"
  [value]="status"
  layout="horizontal"
  width="half"
  status="success"
/>

<d2-label-value
  label="Temperatura"
  [value]="42"
  status="custom"
  color="#ff00ff"
/>
```

## üé® Styl

Komponent posiada w≈Çasne style w pliku SCSS (`d2-label-value.component.scss`) i nie wymaga ≈ºadnych bibliotek CSS. Styl jest minimalistyczny, konfigurowalny i mo≈ºna go ≈Çatwo rozszerzyƒá.

## üòÄ Instalacja

Dodaj komponent do dowolnego modu≈Çu, np. `SharedModule`:

```ts
@NgModule({
  declarations: [D2LabelValueComponent],
  exports: [D2LabelValueComponent],
})
export class SharedModule {}
```

## üìÅ Struktura

```
d2-label-value/
‚îú‚îÄ‚îÄ d2-label-value.component.ts
‚îú‚îÄ‚îÄ d2-label-value.component.html
‚îú‚îÄ‚îÄ d2-label-value.component.scss
‚îî‚îÄ‚îÄ README.md
```

## üìå Wskaz√≥wki

- Warto≈õƒá `value` nie powinna byƒá obiektem ‚Äì przeka≈º `.toString()` lub sformatuj wcze≈õniej.
- Aby obs≈Çugiwaƒá w≈Çasne pipe'y, rozbuduj `switch-case` lub przeka≈º funkcjƒô przez `@Input`.
- Parametr `layout` u≈Çatwia dostosowanie komponentu do siatek formularzy i tabel.
- U≈ºywajƒÖc `status='custom'`, mo≈ºesz w pe≈Çni kontrolowaƒá kolor tekstu.

## üîÆ TODO

- [ ] Obs≈Çuga w≈Çasnych pipe‚Äô√≥w jako obiekty
- [ ] Obs≈Çuga wariant√≥w wyglƒÖdu (np. `variant="subtle"`)
- [ ] Testy jednostkowe
