private updateDataFromForm(): void {
  const fixDate = (val: any): any => {
    if (typeof val === 'string' && val.endsWith('Z')) {
      const d = new Date(val);
      // Tworzymy lokalną datę tylko z komponentu daty (bez godziny)
      const corrected = new Date(d.getFullYear(), d.getMonth(), d.getDate());
      return corrected.toISOString().split('T')[0]; // YYYY-MM-DD
    }

    if (val instanceof Date) {
      const corrected = new Date(val.getFullYear(), val.getMonth(), val.getDate());
      return corrected.toISOString().split('T')[0];
    }

    return val;
  };

  const walkAndFixDates = (obj: any): any => {
    if (Array.isArray(obj)) {
      return obj.map(item => walkAndFixDates(item));
    }

    if (typeof obj === 'object' && obj !== null) {
      const fixedObj: any = {};
      for (const key of Object.keys(obj)) {
        const value = obj[key];
        if (value instanceof Date || (typeof value === 'string' && value.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/))) {
          fixedObj[key] = fixDate(value);
        } else {
          fixedObj[key] = walkAndFixDates(value);
        }
      }
      return fixedObj;
    }

    return obj;
  };

  this.data = walkAndFixDates(this.data);
}



-----------------------

private updateDataFromForm(): void {
  const fixDate = (val: any): any => {
    if (typeof val === 'string' && /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/.test(val)) {
      const localDate = new Date(val);
      localDate.setMinutes(localDate.getMinutes() + localDate.getTimezoneOffset());
      return localDate.toISOString().split('T')[0]; // np. "2025-08-22"
    }

    if (val instanceof Date) {
      const localDate = new Date(val);
      localDate.setMinutes(localDate.getMinutes() + localDate.getTimezoneOffset());
      return localDate.toISOString().split('T')[0];
    }

    return val;
  };

  const walkAndFixDates = (obj: any): any => {
    if (Array.isArray(obj)) {
      return obj.map(item => walkAndFixDates(item));
    }

    if (typeof obj === 'object' && obj !== null) {
      const fixedObj: any = {};
      Object.keys(obj).forEach(key => {
        const value = obj[key];
        fixedObj[key] = (typeof value === 'object' && value !== null)
          ? walkAndFixDates(value)
          : fixDate(value);
      });
      return fixedObj;
    }

    return obj;
  };

  // Zakładam że `this.data` to Twój główny model
  this.data = walkAndFixDates(this.data);
}




// ===============================
// client-contracts.component.ts
// ===============================

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';
import { ClientService } from './client.service';
import { CmkowirBGKModel, DocumentFormDetail, WKBDetail, BGKDocumentType, WKBComponent } from './models';

@Component({
  selector: 'app-client-contracts',
  templateUrl: './client-contracts.component.html',
  styleUrls: ['./client-contracts.component.scss']
})
export class ClientContractsComponent implements OnInit {
  data!: CmkowirBGKModel;
  formGroup!: FormGroup;
  selectedContractIndex = -1;
  readonly optionKeys: BGKDocumentType[] = [
    'StatementListESignatures',
    'StatementListESignaturesBillOfExchange',
    'WKB'
  ];

  collapsedAnnexes: { [key: string]: boolean[] } = {};

  constructor(private clientService: ClientService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.clientService.getClientData().subscribe(data => {
      this.data = data;

      const contractIndex = this.data.contracts.findIndex(
        c => c.contractNumber === this.data.selectedContract?.contractNumber
      );
      this.selectedContractIndex = contractIndex >= 0 ? contractIndex : -1;

      this.initForm();
    });
  }

  initForm(): void {
    this.formGroup = this.fb.group({
      options: this.fb.group({
        StatementListESignatures: this.buildOptionFormGroup(this.data.oswiadczenie, 'StatementListESignatures'),
        StatementListESignaturesBillOfExchange: this.buildOptionFormGroup(this.data.oswiadczenieWeksel, 'StatementListESignaturesBillOfExchange'),
        WKB: this.buildWkbFormGroup(this.data.wkb ?? {} as WKBDetail)
      })
    });
  }

  buildWkbFormGroup(data: WKBDetail): FormGroup {
    return this.fb.group({
      enabled: [!!data],
      bookNumber: [data?.bookNumber ?? ''],
      productName: [data?.productName ?? null],
      withSubsequentChanges: [data?.withSubsequentChanges ?? false],
      components: this.fb.array(
        data?.components?.map(item => this.createWKBComponent(item)) ?? []
      )
    });
  }

  createWKBComponent(item: { name: string; value?: string }): FormGroup {
    return this.fb.group({
      name: [item.name],
      value: [item.value ?? '']
    });
  }

  getWKBComponents(): FormArray {
    return this.formGroup.get(['options', 'WKB', 'components']) as FormArray;
  }

  buildOptionFormGroup(data?: DocumentFormDetail, optionKey?: BGKDocumentType): FormGroup {
    const annexes = (data?.annexes ?? []).map((a, index) => this.createAnnexForm(a, index + 1));
    this.collapsedAnnexes[optionKey!] = annexes.map(() => false);

    return this.fb.group({
      enabled: [!!data],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      }),
      hasAnnexes: [data?.hasAnnexes ?? false],
      annexes: this.fb.array(annexes)
    });
  }

  getDocumentLabel(type: BGKDocumentType): string {
    switch (type) {
      case 'StatementListESignatures':
        return 'Oświadczenie lista e-podpisów';
      case 'StatementListESignaturesBillOfExchange':
        return 'Oświadczenie lista e-podpisów - Weksel';
      case 'WKB':
        return 'Wyciąg z ksiąg banku';
      default:
        return 'Nieznany typ';
    }
  }

  createAnnexForm(data?: any, index?: number): FormGroup {
    return this.fb.group({
      annexNumber: [data?.annexNumber ?? `ANEKS-${index ?? ''}`, Validators.required],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      })
    });
  }

  getAnnexesArray(optionKey: BGKDocumentType): FormArray {
    return this.formGroup.get(['options', optionKey, 'annexes']) as FormArray;
  }

  addAnnex(optionKey: BGKDocumentType): void {
    const annexArray = this.getAnnexesArray(optionKey);
    annexArray.push(this.createAnnexForm(undefined, annexArray.length + 1));
    this.collapsedAnnexes[optionKey].push(false);
  }

  removeAnnex(optionKey: BGKDocumentType, index: number): void {
    const annexArray = this.getAnnexesArray(optionKey);
    annexArray.removeAt(index);
    this.collapsedAnnexes[optionKey].splice(index, 1);

    annexArray.controls.forEach((control, i) => {
      control.get('annexNumber')?.setValue(`ANEKS-${i + 1}`);
    });
  }

  toggleAnnexCollapse(optionKey: BGKDocumentType, index: number): void {
    this.collapsedAnnexes[optionKey][index] = !this.collapsedAnnexes[optionKey][index];
  }

  editAnnex(optionKey: BGKDocumentType, index: number): void {
    const annex = this.getAnnexesArray(optionKey).at(index);
    (annex as any).markAllAsTouched();
  }

  selectContract(index: number): void {
    this.selectedContractIndex = index;
    this.data.selectedContract = this.data.contracts[index];
    this.initForm();
  }

  resetSelectedContract(): void {
    this.selectedContractIndex = -1;
    this.data.selectedContract = undefined;
    this.initForm();
  }

  isOptionEnabled(optionKey: BGKDocumentType): boolean {
    return this.formGroup.get(['options', optionKey, 'enabled'])?.value;
  }

  onDocumentTypeChange(): void {
    const optionsGroup = this.formGroup.get('options') as FormGroup;
    this.data.selectedDocumentTypes = this.optionKeys.filter(key => optionsGroup.get([key, 'enabled'])?.value);
  }

  updateDataFromForm(): void {
    const optionsGroup = this.formGroup.get('options')!.value;

    this.data.oswiadczenie = optionsGroup.StatementListESignatures.enabled ? optionsGroup.StatementListESignatures : undefined;
    this.data.oswiadczenieWeksel = optionsGroup.StatementListESignaturesBillOfExchange.enabled ? optionsGroup.StatementListESignaturesBillOfExchange : undefined;
    this.data.wkb = optionsGroup.WKB.enabled ? {
      bookNumber: optionsGroup.WKB.bookNumber,
      productName: optionsGroup.WKB.productName,
      withSubsequentChanges: optionsGroup.WKB.withSubsequentChanges,
      components: optionsGroup.WKB.components
    } : undefined;

    this.onDocumentTypeChange();
  }

  save(): void {
    this.updateDataFromForm();
    this.clientService.saveData(this.data).subscribe();
  }

  download(): void {
    this.updateDataFromForm();
    this.clientService.downloadDocuments(this.data).subscribe();
  }
}

-----------------------

<div *ngIf="isOptionEnabled('WKB')" formGroupName="WKB" class="mt-4">
  <div class="row mb-3">
    <div class="col-md-4">
      <label>Numer księgi:</label>
      <input type="text" formControlName="bookNumber" class="form-control" />
    </div>
    <div class="col-md-4">
      <label>Nazwa produktu:</label>
      <input type="text" formControlName="productName" class="form-control" />
    </div>
    <div class="col-md-4 d-flex align-items-end">
      <div class="form-check">
        <input
          type="checkbox"
          class="form-check-input"
          id="withSubsequentChanges"
          formControlName="withSubsequentChanges"
        />
        <label for="withSubsequentChanges" class="form-check-label">
          Umowa z późniejszymi zmianami
        </label>
      </div>
    </div>
  </div>

  <h5 class="mb-2">Na wierzytelność składa się:</h5>
  <div formArrayName="components">
    <div
      *ngFor="let group of getWKBComponents().controls; let i = index"
      [formGroupName]="i"
      class="row mb-2"
    >
      <div class="col-md-4">
        <label class="form-label">
          {{ group.get('name')?.value }}
        </label>
      </div>
      <div class="col-md-8">
        <input type="text" formControlName="value" class="form-control" />
      </div>
    </div>
  </div>
</div>

-------------------------



export interface CmkowirBGKModel {
  kkf: string;
  currentDate: string;
  client: Client;
  contracts: Contract[];
  selectedContract?: Contract;
  oswiadczenie?: DocumentFormDetail;
  oswiadczenieWeksel?: DocumentFormDetail;
  selectedDocumentTypes: BGKDocumentType[];
  wkb?: WKBDetail;
}

export interface WKBDetail {
  bookNumber: string;
  productName?: string;
  withSubsequentChanges?: boolean;
  components: WKBComponent[];
}

export interface WKBComponent {
  name: string;
  value?: string;
}



//////////////////////



public class CmkowirBGKModel
{
    public string Kkf { get; set; }
    public DateTime CurrentDate { get; set; }
    public ClientDto Client { get; set; }
    public List<ContractDto> Contracts { get; set; }
    public ContractDto SelectedContract { get; set; }
    public DocumentFormDetailDto Oswiadczenie { get; set; }
    public DocumentFormDetailDto OswiadczenieWeksel { get; set; }
    public List<BGKDocumentType> SelectedDocumentTypes { get; set; }
    public WKBDetailDto WKB { get; set; }
}

public class WKBDetailDto
{
    public string BookNumber { get; set; }
    public string ProductName { get; set; }
    public bool WithSubsequentChanges { get; set; }
    public List<WKBComponentDto> Components { get; set; }
}

public class WKBComponentDto
{
    public string Name { get; set; }
    public string Value { get; set; }
}



