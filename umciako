import { Component } from '@angular/core';
import { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';

type Dictionary = Record<string, string>;

interface CheckboxItemGroup {
  // Typed FormControls for better type safety
  key: FormControl<string>;
  label: FormControl<string>;
  checked: FormControl<boolean>;
}

@Component({
  selector: 'app-permissions',
  templateUrl: './permissions.component.html',
})
export class PermissionsComponent {
  // Root form with a single FormArray named "items"
  readonly form = this.fb.group({
    items: this.fb.array<FormGroup<CheckboxItemGroup>>([]),
  });

  constructor(private readonly fb: FormBuilder) {
    // Example dictionary: key -> label
    const dict: Dictionary = {
      read: 'Can read',
      write: 'Can write',
      share: 'Can share',
      delete: 'Can delete',
    };

    // (Optional) Preselected keys
    const preselected = ['read', 'share'];

    // Build FormArray from dictionary
    this.form.setControl('items', this.buildCheckboxArray(dict, preselected));
  }

  // Convenience getter for template access
  get items(): FormArray<FormGroup<CheckboxItemGroup>> {
    return this.form.get('items') as FormArray<FormGroup<CheckboxItemGroup>>;
  }

  buildCheckboxArray(dict: Dictionary, preselectedKeys: string[] = []): FormArray<FormGroup<CheckboxItemGroup>> {
    // Create a FormGroup per dictionary entry
    const groups = Object.entries(dict).map(([key, label]) =>
      this.fb.group<CheckboxItemGroup>({
        // Store the key and label as string controls (read-only in UI, but kept in the form for easy access)
        key: new FormControl(key, { nonNullable: true, validators: [Validators.required] }),
        label: new FormControl(label, { nonNullable: true, validators: [Validators.required] }),
        // The actual checkbox value
        checked: new FormControl(preselectedKeys.includes(key), { nonNullable: true }),
      })
    );

    return this.fb.array<FormGroup<CheckboxItemGroup>>(groups);
  }

  trackByIndex(index: number): number {
    // Simple and efficient trackBy for *ngFor
    return index;
  }

  getSelectedKeys(): string[] {
    // Returns all keys which are currently checked
    return this.items.controls
      .filter(group => group.controls.checked.value === true)
      .map(group => group.controls.key.value);
  }

  onSubmit(): void {
    // Example submit handler
    const selected = this.getSelectedKeys();
    console.log('Selected keys:', selected);
    // TODO: handle the result as needed (send to API, etc.)
  }
}


--------------------------------------


<form [formGroup]="form" (ngSubmit)="onSubmit()">
  <div formArrayName="items">
    <ng-container
      *ngFor="let group of items.controls; let i = index; trackBy: trackByIndex"
      [formGroupName]="i"
    >
      <div class="flex items-center gap-2 py-1">
        <!-- Use a stable id derived from the key to tie input and label -->
        <input
          type="checkbox"
          formControlName="checked"
          [id]="'chk-' + group.controls.key.value"
        />
        <label
          class="cursor-pointer"
          [for]="'chk-' + group.controls.key.value"
        >
          {{ group.controls.label.value }}
        </label>
      </div>
    </ng-container>
  </div>

  <button type="submit">Save</button>
</form>
