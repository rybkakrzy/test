// Container for rows – flex-based layout
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -8px;
  margin-right: -8px;
}

// Base style for every column
.col {
  padding: 8px;
  box-sizing: border-box;
}

// Fixed 12-column grid system (percent-based widths)
.col-1  { flex: 0 0 8.3333%;  max-width: 8.3333%; }
.col-2  { flex: 0 0 16.6667%; max-width: 16.6667%; }
.col-3  { flex: 0 0 25%;      max-width: 25%; }
.col-4  { flex: 0 0 33.3333%; max-width: 33.3333%; }
.col-5  { flex: 0 0 41.6667%; max-width: 41.6667%; }
.col-6  { flex: 0 0 50%;      max-width: 50%; }
.col-7  { flex: 0 0 58.3333%; max-width: 58.3333%; }
.col-8  { flex: 0 0 66.6667%; max-width: 66.6667%; }
.col-9  { flex: 0 0 75%;      max-width: 75%; }
.col-10 { flex: 0 0 83.3333%; max-width: 83.3333%; }
.col-11 { flex: 0 0 91.6667%; max-width: 91.6667%; }
.col-12 { flex: 0 0 100%;     max-width: 100%; }


// Main row class using Flexbox
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -8px;
  margin-right: -8px;
}

// Column with padding and flexible sizing
.col {
  padding: 8px;
  box-sizing: border-box;
  flex-grow: 1;
}

// Example column width classes (12-column system)
@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 #{($i / 12) * 100}%;
    max-width: #{($i / 12) * 100}%;
  }
}




import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-dynamic-control',
  templateUrl: './dynamic-control.component.html',
})
export class DynamicControlComponent {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      name: ['', Validators.required],
      provideDetails: [false]
    });

    this.form.get('provideDetails')?.valueChanges.subscribe((checked: boolean) => {
      if (checked) {
        this.addDetailsGroup();
      } else {
        this.removeDetailsGroup();
      }
    });
  }

  private addDetailsGroup(): void {
    if (!this.form.contains('details')) {
      const detailsGroup = this.fb.group({
        age: [null, [Validators.required, Validators.min(0)]],
        address: ['', Validators.required]
      });

      this.form.addControl('details', detailsGroup);
    }
  }

  private removeDetailsGroup(): void {
    if (this.form.contains('details')) {
      this.form.removeControl('details');
    }
  }

  onSubmit(): void {
    if (this.form.valid) {
      console.log('Form value:', this.form.value);
    } else {
      this.form.markAllAsTouched();
    }
  }
}


<!-- Wyświetl dodatkowe pola, jeśli grupa "details" została dodana -->
<div *ngIf="form.contains('details')" [formGroupName]="'details'">
  <label>
    Wiek:
    <input type="number" formControlName="age">
  </label>

  <label>
    Adres:
    <input type="text" formControlName="address">
  </label>
</div>
