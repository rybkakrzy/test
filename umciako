trigger:
- main

resources:
  pipelines:
  - pipeline: testsPipeline      # alias
    source: Tests-CI             # nazwa pipeline z repo testowego
    project: MyProject           # projekt w Azure DevOps
    branch: main                 # z ktÃ³rego brancha uruchamiaÄ‡ testy

stages:
- stage: Build
  jobs:
  - job: BuildApp
    steps:
    - script: echo "Build application here"

- stage: Run_Tests
  dependsOn: Build
  jobs:
  - job: RunTests
    steps:
    - script: echo "Triggering tests pipeline"
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
    - task: PowerShell@2
      inputs:
        targetType: inline
        script: |
          echo "Here you could trigger the tests pipeline"

stages:
- stage: Build
  jobs:
  - job: BuildApp
    steps:
    - script: echo "Build app..."

- stage: Run_Tests
  dependsOn: Build
  jobs:
  - job: TriggerTests
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        source: testsPipeline



private List<ZswBalanceDocument> ReadBalanceDocument(byte[] excelContent, string documentId)
{
    var documents = new List<ZswBalanceDocument>();

    using var stream = new MemoryStream(excelContent);
    using var document = SpreadsheetDocument.Open(stream, isEditable: false);

    var workbookPart = document.WorkbookPart;
    var sheet = workbookPart.Workbook.Sheets.Elements<Sheet>().First();
    var worksheetPart = (WorksheetPart)workbookPart.GetPartById(sheet.Id);

    var sharedStringTable = workbookPart.SharedStringTablePart.SharedStringTable;

    string GetCellValue(string cellReference, Row row)
    {
        var cell = row.Elements<Cell>()
            .FirstOrDefault(c => c.CellReference?.Value.StartsWith(cellReference) == true);

        if (cell == null || cell.CellValue == null)
            return string.Empty;

        var value = cell.CellValue.InnerText;

        if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
        {
            var index = int.Parse(value);
            return sharedStringTable.ElementAt(index).InnerText;
        }

        return value;
    }

    string GetCellValue(string cellReference)
    {
        var cell = worksheetPart.Worksheet.Descendants<Cell>()
            .FirstOrDefault(c => c.CellReference?.Value == cellReference);

        if (cell == null || cell.CellValue == null)
            return string.Empty;

        var value = cell.CellValue.InnerText;

        if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
        {
            var index = int.Parse(value);
            return sharedStringTable.ElementAt(index).InnerText;
        }

        return value;
    }

    // ðŸ‘‡ najpierw odczytujemy saldo z nagÅ‚Ã³wka (np. B1)
    var balanceAtDate = ParseDate(GetCellValue("B1"));

    foreach (var row in worksheetPart.Worksheet.Descendants<Row>())
    {
        // pomijamy nagÅ‚Ã³wki
        if (row.RowIndex.Value < 3)
            continue;

        var balanceDoc = new ZswBalanceDocument
        {
            DocumentId = documentId,
            ShortAccountNumber = GetCellValue("A", row),
            BalanceAtDate = balanceAtDate, // ðŸ‘ˆ przepisywane do kaÅ¼dego obiektu
            TotalCapital = Math.Round(ParseDecimal(GetCellValue("C", row)), 2),
            DueCapital = Math.Round(ParseDecimal(GetCellValue("D", row)), 2),
            ContractualInterest = Math.Round(ParseDecimal(GetCellValue("E", row)), 2),
            DueInterest = Math.Round(ParseDecimal(GetCellValue("F", row)), 2),
            DefaultInterest = Math.Round(ParseDecimal(GetCellValue("G", row)), 2),
            FeesOrCommissions = Math.Round(ParseDecimal(GetCellValue("H", row)), 2),
            TotalRepaymentAmount = Math.Round(ParseDecimal(GetCellValue("I", row)), 2),
            Currency = GetCellValue("J", row),
            DueDate = ParseDate(GetCellValue("K", row))
        };

        documents.Add(balanceDoc);
    }

    return documents;
}
