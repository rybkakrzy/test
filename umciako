- name: testsHeader
  type: string
  default: "──────── 🧪 TESTS ────────"
  displayName: " "


https://www.emotikonyznaczenie.pl/

✅ ☑️ ✔️ (testy zaliczone)

🧪 (testy)

🤖 (automaty/autotesty)

🚀 (deploy)

🔧 (build)

🔥 (coś krytycznego)

🐛 (debug / bugfix)



jobs:
- job: run_tests
  pool: 'BSK-only-tests-runner-pool'
  steps:
    - ${{ if eq(variables['Build.Repository.Name'], 'P09811-doc2') }}:
        - checkout: autotest


resources:
  pipelines:
    - pipeline: autotest
      source: P09811-Testing-Automation    # tu NAZWA pipeline z DevOps
      project: P09811
      trigger: none   # żeby nie triggerował się sam


stages:
- stage: QA_Tests
  displayName: "QA UAT"
  jobs:
  - job: Run_Tests
    steps:
    - script: echo "Running autotest pipeline..."


resources:
  repositories:
    - repository: autotest
      type: git
      name: P09811-testing-automation
      ref: refs/heads/develop

stages:
- stage: QA_Tests
  displayName: "QA UAT"
  jobs:
  - template: pipeline/jobs/run_tests.yml@autotest
    parameters:
      unittest: ${{ parameters.unittest }}
      testprojs: ${{ parameters.testprojs }}





resources:
  pipelines:
    - pipeline: autotest
      source: P09811-testing-automation
      project: P09811
      branch: develop

stages:
- stage: qa_tests_uat
  displayName: "QA UAT"
  dependsOn: []
  jobs:
  - job: RunTests
    steps:
    - script: echo "Trigger autotest pipeline"




private List<ZswBalanceDocument> ReadBalanceDocument(byte[] excelContent, string documentId)
{
    var documents = new List<ZswBalanceDocument>();

    using var stream = new MemoryStream(excelContent);
    using var document = SpreadsheetDocument.Open(stream, isEditable: false);

    var workbookPart = document.WorkbookPart;
    var sheet = workbookPart.Workbook.Sheets.Elements<Sheet>().First();
    var worksheetPart = (WorksheetPart)workbookPart.GetPartById(sheet.Id);

    var sharedStringTable = workbookPart.SharedStringTablePart.SharedStringTable;

    string GetCellValue(string cellReference, Row row)
    {
        var cell = row.Elements<Cell>()
            .FirstOrDefault(c => c.CellReference?.Value.StartsWith(cellReference) == true);

        if (cell == null || cell.CellValue == null)
            return string.Empty;

        var value = cell.CellValue.InnerText;

        if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
        {
            var index = int.Parse(value);
            return sharedStringTable.ElementAt(index).InnerText;
        }

        return value;
    }

    string GetCellValue(string cellReference)
    {
        var cell = worksheetPart.Worksheet.Descendants<Cell>()
            .FirstOrDefault(c => c.CellReference?.Value == cellReference);

        if (cell == null || cell.CellValue == null)
            return string.Empty;

        var value = cell.CellValue.InnerText;

        if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
        {
            var index = int.Parse(value);
            return sharedStringTable.ElementAt(index).InnerText;
        }

        return value;
    }

    // 👇 najpierw odczytujemy saldo z nagłówka (np. B1)
    var balanceAtDate = ParseDate(GetCellValue("B1"));

    foreach (var row in worksheetPart.Worksheet.Descendants<Row>())
    {
        // pomijamy nagłówki
        if (row.RowIndex.Value < 3)
            continue;

        var balanceDoc = new ZswBalanceDocument
        {
            DocumentId = documentId,
            ShortAccountNumber = GetCellValue("A", row),
            BalanceAtDate = balanceAtDate, // 👈 przepisywane do każdego obiektu
            TotalCapital = Math.Round(ParseDecimal(GetCellValue("C", row)), 2),
            DueCapital = Math.Round(ParseDecimal(GetCellValue("D", row)), 2),
            ContractualInterest = Math.Round(ParseDecimal(GetCellValue("E", row)), 2),
            DueInterest = Math.Round(ParseDecimal(GetCellValue("F", row)), 2),
            DefaultInterest = Math.Round(ParseDecimal(GetCellValue("G", row)), 2),
            FeesOrCommissions = Math.Round(ParseDecimal(GetCellValue("H", row)), 2),
            TotalRepaymentAmount = Math.Round(ParseDecimal(GetCellValue("I", row)), 2),
            Currency = GetCellValue("J", row),
            DueDate = ParseDate(GetCellValue("K", row))
        };

        documents.Add(balanceDoc);
    }

    return documents;
}
