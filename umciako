using OfficeOpenXml;
using System.Globalization;

public class ExcelImporter
{
    // Wymaga dodania NuGet: EPPlus
    public BalanceDocument ReadBalanceDocument(string excelFilePath)
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using var package = new ExcelPackage(new FileInfo(excelFilePath));
        var worksheet = package.Workbook.Worksheets[0]; // Zakładam pierwszy arkusz

        var doc = new BalanceDocument
        {
            DocumentId = worksheet.Cells["B3"].Text,
            BalanceAtDate = DateTime.ParseExact(worksheet.Cells["K1"].Text, "yyyy-MM-dd", CultureInfo.InvariantCulture),
            TotalCapital = ParseDecimal(worksheet.Cells["C5"].Text),
            DueCapital = ParseDecimal(worksheet.Cells["D5"].Text),
            ContractualInterest = ParseDecimal(worksheet.Cells["E5"].Text),
            DueInterest = ParseDecimal(worksheet.Cells["F5"].Text),
            DefaultInterest = ParseDecimal(worksheet.Cells["G5"].Text),
            FeesOrCommissions = ParseDecimal(worksheet.Cells["H5"].Text),
            TotalRepaymentAmount = ParseDecimal(worksheet.Cells["I5"].Text),
            Currency = worksheet.Cells["J5"].Text,
            DueDate = DateTime.ParseExact(worksheet.Cells["K5"].Text, "yyyy-MM-dd", CultureInfo.InvariantCulture)
        };

        return doc;
    }

    private decimal ParseDecimal(string input)
    {
        // Umożliwia parsowanie polskich liczb z przecinkiem
        return decimal.Parse(input, NumberStyles.Any, new CultureInfo("pl-PL"));
    }
}


public class BalanceDocument
{
    // ID dokumentu
    public string DocumentId { get; set; }

    // Saldo na dzień
    public DateTime BalanceAtDate { get; set; }

    // Kapitał ogółem
    public decimal TotalCapital { get; set; }

    // W tym kapitał wymagalny
    public decimal DueCapital { get; set; }

    // Odsetki umowne
    public decimal ContractualInterest { get; set; }

    // W tym odsetki wymagalne
    public decimal DueInterest { get; set; }

    // Odsetki za zwłokę
    public decimal DefaultInterest { get; set; }

    // Opłaty / prowizje
    public decimal FeesOrCommissions { get; set; }

    // Suma do spłaty ogółem
    public decimal TotalRepaymentAmount { get; set; }

    // Waluta
    public string Currency { get; set; }

    // Data wymagalności
    public DateTime DueDate { get; set; }
}




using OfficeOpenXml;
using System.Globalization;

public class ExcelImporter
{
    public BalanceDocument ReadBalanceDocument(byte[] excelContent)
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using var stream = new MemoryStream(excelContent);
        using var package = new ExcelPackage(stream);
        var worksheet = package.Workbook.Worksheets[0]; // Zakładamy pierwszy arkusz

        var doc = new BalanceDocument
        {
            DocumentId = worksheet.Cells["B3"].Text,
            BalanceAtDate = ParseDate(worksheet.Cells["K1"].Text),
            TotalCapital = ParseDecimal(worksheet.Cells["C5"].Text),
            DueCapital = ParseDecimal(worksheet.Cells["D5"].Text),
            ContractualInterest = ParseDecimal(worksheet.Cells["E5"].Text),
            DueInterest = ParseDecimal(worksheet.Cells["F5"].Text),
            DefaultInterest = ParseDecimal(worksheet.Cells["G5"].Text),
            FeesOrCommissions = ParseDecimal(worksheet.Cells["H5"].Text),
            TotalRepaymentAmount = ParseDecimal(worksheet.Cells["I5"].Text),
            Currency = worksheet.Cells["J5"].Text,
            DueDate = ParseDate(worksheet.Cells["K5"].Text)
        };

        return doc;
    }

    private decimal ParseDecimal(string input)
    {
        // Obsługa np. 27 114,64 lub 5388,85 (Excel PL format)
        var normalized = input?.Replace("\u00A0", ""); // usuń spacje niełamiące (Excel często je używa)
        return decimal.TryParse(normalized, NumberStyles.Any, new CultureInfo("pl-PL"), out var result)
            ? result
            : 0;
    }

    private DateTime ParseDate(string input)
    {
        return DateTime.TryParseExact(input, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var result)
            ? result
            : DateTime.MinValue;
    }
}
