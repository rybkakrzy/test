WidzÄ™ TwÃ³j plik konfiguracyjny Nginx ğŸ™‚
Masz tam serwer sÅ‚uchajÄ…cy na porcie 15222, zdefiniowany access_log (/doc2/pocz2/nginx/access.log combined) i kilka location kierujÄ…cych na backendy przez proxy_pass.

Å»eby logi byÅ‚y maksymalnie szczegÃ³Å‚owe (zarÃ³wno dla bÅ‚Ä™dÃ³w, jak i ruchu HTTP), moÅ¼esz dodaÄ‡ globalnie w sekcji http coÅ› w tym stylu:

http {
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 200M;

    # Error log z peÅ‚nym poziomem szczegÃ³Å‚owoÅ›ci
    error_log /doc2/pocz2/nginx/error.log debug;

    # WÅ‚asny, rozbudowany format logÃ³w
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        'rt=$request_time '
                        'ua="$upstream_addr" us="$upstream_status" '
                        'ut="$upstream_response_time" '
                        'cs=$upstream_cache_status';

    # DomyÅ›lnie wszystkie serwery korzystajÄ… z tego access loga
    access_log /doc2/pocz2/nginx/access.log detailed;

    server {
        listen       15222;
        server_name  localhost;

        root   /usr/share/nginx/html;
        index  index.html;

        # Twoje lokacje:
        location / {
            try_files $uri $uri/ /index.html =404;
        }

        location /FormsWebApp/ {
            proxy_pass http://localhost:4200;
            proxy_set_header Host $host;
        }

        location /FormsRedirector/ {
            proxy_pass http://localhost:4300;
            proxy_set_header Host $host;
        }
    }
}

Co siÄ™ zmienia:

error_log ... debug; â€“ dostaniesz wszystkie poziomy bÅ‚Ä™dÃ³w (od krytycznych po debug).

log_format detailed â€“ duÅ¼o bogatsze logi access niÅ¼ combined (masz czas requestu, info o upstreamach, status cache).

access_log ... detailed; â€“ wymuszasz uÅ¼ycie tego formatu.

ğŸ“Œ Uwaga praktyczna:

W Å›rodowisku produkcyjnym raczej nie zostawiaj debug, bo logi urosnÄ… w szalonym tempie i mogÄ… mocno obciÄ…Å¼yÄ‡ serwer. Najlepiej wtedy trzymaÄ‡ error lub warn.

Dla debugowania / dev/staging â€“ opcja debug plus szczegÃ³Å‚owe access logi sprawdzi siÄ™ Å›wietnie.

Chcesz, Å¼ebym Ci przygotowaÅ‚ dwa warianty tego pliku?
ğŸ‘‰ jeden do dev/testÃ³w (maksymalny szczegÃ³Å‚),
ğŸ‘‰ drugi do produkcji (lekki, ale nadal uÅ¼yteczny do diagnozy)?

-------------------




# =========================
# Global process settings
# =========================
user  nginx;                  # <<< On Debian/Ubuntu use: www-data
worker_processes auto;
pid /run/nginx.pid;
worker_rlimit_nofile 200000;

events {
    worker_connections  65535;
    multi_accept on;
    # debug_connection 1.2.3.4;   # (optional) limit 'debug' logs to your IP during investigation
}

# =========================
# HTTP (web) settings
# =========================
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    charset       utf-8;

    # -------- Access logs (rich JSON) --------
    log_subrequest on;  # log internal redirects/subrequests (useful for SPA)
    log_format main_json escape=json
      '{'
        '"time":"$time_iso8601",'
        '"remote":"$remote_addr",'
        '"host":"$host",'
        '"method":"$request_method",'
        '"uri":"$request_uri",'
        '"status":$status,'
        '"req_len":$request_length,'
        '"sent":$body_bytes_sent,'
        '"req_time":$request_time,'
        '"up_addr":"$upstream_addr",'
        '"up_status":"$upstream_status",'
        '"up_connect_time":"$upstream_connect_time",'
        '"up_header_time":"$upstream_header_time",'
        '"up_resp_time":"$upstream_response_time",'
        '"ref":"$http_referer",'
        '"ua":"$http_user_agent",'
        '"cache":"$upstream_cache_status",'
        '"conn":"$connection",'
        '"conn_reqs":"$connection_requests",'
        '"pipe":"$pipe"'
      '}';
    access_log /var/log/nginx/access.json main_json buffer=256k flush=1s gzip;

    # Error log level:
    # - info: recommended default
    # - debug: only temporarily (VERY verbose)
    error_log  /var/log/nginx/error.log info;

    # -------- Performance/networking --------
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65s;
    keepalive_requests 1000;
    server_tokens off;
    reset_timedout_connection on;
    open_log_file_cache max=1000 inactive=30s valid=1m min_uses=2;

    # -------- Upload-friendly limits/timeouts --------
    client_max_body_size  512m;    # align with backend limits
    client_body_timeout   600s;
    send_timeout          600s;
    large_client_header_buffers 8 64k;

    # Move temporary files to a large/fast volume (create and chown to nginx)
    client_body_temp_path  /data/nginx/body  1 2;
    proxy_temp_path        /data/nginx/proxy 1 2;

    # -------- Gzip for text assets --------
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_types
      text/plain text/css application/json application/javascript
      application/xml application/rss+xml application/vnd.ms-fontobject
      application/x-font-ttf font/opentype image/svg+xml;

    # -------- Upstream to .NET/Kestrel --------
    upstream dotnet_backend {
        server 127.0.0.1:51111 max_fails=3 fail_timeout=10s;   # <<< CHANGE ME (host:port)
        keepalive 64;  # keep persistent connections to backend
    }

    # WebSocket upgrade mapping (harmless if unused)
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # =========================
    # Server (Angular + API)
    # =========================
    server {
        listen      80;             # <<< CHANGE to 443 with TLS if needed
        server_name _;

        # --- Security headers (safe defaults) ---
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-XSS-Protection "1; mode=block" always;

        # --- SPA (Angular) static files ---
        root  /var/www/angular-dist;     # <<< CHANGE ME (Angular dist path)
        index index.html;

        # Cache immutable assets aggressively
        location ~* \.(?:js|mjs|css|png|jpg|jpeg|gif|webp|svg|ico|woff2?|ttf)$ {
            access_log off;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000, immutable";
            try_files $uri =404;
        }

        # SPA fallback for client-side routes
        location / {
            try_files $uri $uri/ /index.html;
        }

        # --- API â†’ .NET 8 (reverse proxy) ---
        location /api/ {
            proxy_http_version 1.1;

            # Remove 'Expect: 100-continue' that sometimes breaks uploads
            proxy_set_header Expect "";

            proxy_set_header Host               $host;
            proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto  $scheme;

            # Let Nginx buffer request bodies to temp dir first (safer for .NET)
            proxy_request_buffering on;

            # Generous timeouts for large/slow uploads
            proxy_connect_timeout 30s;
            proxy_send_timeout    600s;
            proxy_read_timeout    600s;

            # Optional per-location log file (still JSON)
            access_log /var/log/nginx/api_access.json main_json buffer=256k flush=1s gzip;

            proxy_pass http://dotnet_backend;
        }

        # Optional runtime stats (limit access!)
        location /nginx_status {
            stub_status on;
            allow 127.0.0.1;
            # allow 10.0.0.0/8;   # <<< your CIDR if needed
            deny all;
        }

        # Simple error page (everything is logged in error.log anyway)
        error_page 500 502 503 504 /50x.html;
        location = /50x.html { internal; return 500 "Internal error\n"; }
    }

    # --- Optionally include other vhosts here ---
    # include /etc/nginx/conf.d/*.conf;
}
