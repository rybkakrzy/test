<!-- =============================== -->
<!-- client-contracts.component.html -->
<!-- =============================== -->

<form [formGroup]="formGroup">
  <div formGroupName="options">
    <div class="form-horizontal">
      <label *ngFor="let key of optionKeys" class="form-horizontal-item">
        <input type="checkbox"
               [formControlName]="key"
               (change)="onDocumentTypeChange()" />
        {{ getDocumentLabel(key) }}
      </label>
    </div>

    <ng-container *ngFor="let key of optionKeys">
      <ng-container *ngIf="isOptionEnabled(key)">
        <div [formGroupName]="key">

          <ng-container *ngIf="key === 'MKB'">
            <label>Numer księgi:
              <input type="text" formControlName="bookNumber" />
            </label>
          </ng-container>

          <ng-container *ngIf="key !== 'MKB'">
            <div>
              <label>
                <input type="radio" formControlName="sameDay" [value]="true" />
                Podpisane tego samego dnia
              </label>
              <label>
                <input type="radio" formControlName="sameDay" [value]="false" />
                Podpisane w różnych dniach
              </label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="sameDayDates">
              <label>Data podpisu elektronicznego:
                <input type="date" formControlName="electronicDate" />
              </label>
              <label>Data podpisu manualnego:
                <input type="date" formControlName="manualDate" />
              </label>
            </div>

            <div *ngIf="!formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="separateDates">
              <h6>Wniosek</h6>
              <div formGroupName="application">
                <label>Data podpisu elektronicznego:
                  <input type="date" formControlName="electronicDate" />
                </label>
                <label>Data podpisu manualnego:
                  <input type="date" formControlName="manualDate" />
                </label>
              </div>
              <h6>Formularz</h6>
              <div formGroupName="form">
                <label>Data podpisu elektronicznego:
                  <input type="date" formControlName="electronicDate" />
                </label>
                <label>Data podpisu manualnego:
                  <input type="date" formControlName="manualDate" />
                </label>
              </div>
            </div>

            <div>
              <p><strong>Czy do umowy został sporządzony aneks?</strong></p>
              <label><input type="radio" formControlName="hasAnnexes" [value]="true" /> Tak</label>
              <label><input type="radio" formControlName="hasAnnexes" [value]="false" /> Nie</label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'hasAnnexes'])?.value">
              <div formArrayName="annexes">
                <div *ngFor="let annex of getAnnexesArray(key).controls; let i = index" [formGroupName]="i">

                  <div class="accordion">
                    <span>Aneks nr {{ annex.get('annexNumber')?.value }}</span>
                    <button type="button" (click)="toggleAnnexCollapse(key, i)">
                      {{ collapsedAnnexes[key][i] ? 'Rozwiń' : 'Zwiń' }}
                    </button>
                    <button type="button" (click)="removeAnnex(key, i)" class="button-outline-navy size-12">
                      Usuń
                    </button>
                  </div>

                  <div *ngIf="!collapsedAnnexes[key][i]">
                    <label>Numer aneksu:
                      <input type="text" formControlName="annexNumber" />
                    </label>

                    <div>
                      <label>
                        <input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia
                      </label>
                      <label>
                        <input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach
                      </label>
                    </div>

                    <div *ngIf="annex.get('sameDay')?.value" formGroupName="sameDayDates">
                      <label>Data podpisu elektronicznego:
                        <input type="date" formControlName="electronicDate" />
                      </label>
                      <label>Data podpisu manualnego:
                        <input type="date" formControlName="manualDate" />
                      </label>
                    </div>

                    <div *ngIf="!annex.get('sameDay')?.value" formGroupName="separateDates">
                      <h6>Wniosek</h6>
                      <div formGroupName="application">
                        <label>Data podpisu elektronicznego:
                          <input type="date" formControlName="electronicDate" />
                        </label>
                        <label>Data podpisu manualnego:
                          <input type="date" formControlName="manualDate" />
                        </label>
                      </div>
                      <h6>Formularz</h6>
                      <div formGroupName="form">
                        <label>Data podpisu elektronicznego:
                          <input type="date" formControlName="electronicDate" />
                        </label>
                        <label>Data podpisu manualnego:
                          <input type="date" formControlName="manualDate" />
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <button type="button" (click)="addAnnex(key)">Dodaj aneks</button>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'hasAnnexes'])?.value && getAnnexesArray(key).length === 0"
                 style="background-color: yellow; padding: 8px; margin-top: 10px;">
              Brak aneksów
            </div>

          </ng-container>
        </div>
      </ng-container>
    </ng-container>
  </div>
</form>

<section style="margin-top: 20px">
  <button (click)="save()">Zapisz</button>
  <button (click)="download()">Pobierz dokumenty</button>
</section>
-----------------------------


// ===============================
// client-contracts.component.ts
// ===============================

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ClientService } from './client.service';
import { CmkowirBGKModel, DocumentFormDetail, WyciagDetail, BGKDocumentType } from './models';

@Component({
  selector: 'app-client-contracts',
  templateUrl: './client-contracts.component.html',
  styleUrls: ['./client-contracts.component.scss']
})
export class ClientContractsComponent implements OnInit {
  data!: CmkowirBGKModel;
  formGroup!: FormGroup;
  selectedContractIndex = -1;
  readonly optionKeys: BGKDocumentType[] = [
    'StatementListESignatures',
    'StatementListESignaturesBillOfExchange',
    'MKB'
  ];

  collapsedAnnexes: { [key: string]: boolean[] } = {};

  constructor(private clientService: ClientService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.clientService.getClientData().subscribe(data => {
      this.data = data;

      const contractIndex = this.data.contracts.findIndex(
        c => c.contractNumber === this.data.selectedContract?.contractNumber
      );
      this.selectedContractIndex = contractIndex >= 0 ? contractIndex : -1;

      this.initForm();
    });
  }

  initForm(): void {
    this.formGroup = this.fb.group({
      options: this.fb.group({
        StatementListESignatures: this.buildOptionFormGroup(this.data.oswiadczenie, 'StatementListESignatures'),
        StatementListESignaturesBillOfExchange: this.buildOptionFormGroup(this.data.oswiadczenieWeksel, 'StatementListESignaturesBillOfExchange'),
        MKB: this.fb.group({
          enabled: [!!this.data.wyciag?.bookNumber],
          bookNumber: [this.data.wyciag?.bookNumber ?? '']
        })
      })
    });
  }

  buildOptionFormGroup(data?: DocumentFormDetail, optionKey?: BGKDocumentType): FormGroup {
    const annexes = (data?.annexes ?? []).map((a, index) => this.createAnnexForm(a, index + 1));
    this.collapsedAnnexes[optionKey!] = annexes.map(() => false);

    return this.fb.group({
      enabled: [!!data],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      }),
      hasAnnexes: [data?.hasAnnexes ?? false],
      annexes: this.fb.array(annexes)
    });
  }

  getDocumentLabel(type: BGKDocumentType): string {
    switch (type) {
      case 'StatementListESignatures':
        return 'Oświadczenie lista e-podpisów';
      case 'StatementListESignaturesBillOfExchange':
        return 'Oświadczenie lista e-podpisów - Weksel';
      case 'MKB':
        return 'Wyciąg z ksiąg banku';
      default:
        return 'Nieznany typ';
    }
  }

  createAnnexForm(data?: any, index?: number): FormGroup {
    return this.fb.group({
      annexNumber: [data?.annexNumber ?? `ANEKS-${index ?? ''}`, Validators.required],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      })
    });
  }

  getAnnexesArray(optionKey: BGKDocumentType): FormArray {
    return this.formGroup.get(['options', optionKey, 'annexes']) as FormArray;
  }

  addAnnex(optionKey: BGKDocumentType): void {
    const annexArray = this.getAnnexesArray(optionKey);
    annexArray.push(this.createAnnexForm(undefined, annexArray.length + 1));
    this.collapsedAnnexes[optionKey].push(false);
  }

  removeAnnex(optionKey: BGKDocumentType, index: number): void {
    this.getAnnexesArray(optionKey).removeAt(index);
    this.collapsedAnnexes[optionKey].splice(index, 1);
  }

  toggleAnnexCollapse(optionKey: BGKDocumentType, index: number): void {
    this.collapsedAnnexes[optionKey][index] = !this.collapsedAnnexes[optionKey][index];
  }

  editAnnex(optionKey: BGKDocumentType, index: number): void {
    const annex = this.getAnnexesArray(optionKey).at(index);
    (annex as any).markAllAsTouched();
  }

  selectContract(index: number): void {
    this.selectedContractIndex = index;
    this.data.selectedContract = this.data.contracts[index];
    this.initForm();
  }

  resetSelectedContract(): void {
    this.selectedContractIndex = -1;
    this.data.selectedContract = undefined;
    this.initForm();
  }

  isOptionEnabled(optionKey: BGKDocumentType): boolean {
    return this.formGroup.get(['options', optionKey, 'enabled'])?.value;
  }

  onDocumentTypeChange(): void {
    const optionsGroup = this.formGroup.get('options') as FormGroup;
    this.data.selectedDocumentTypes = this.optionKeys.filter(key => optionsGroup.get([key, 'enabled'])?.value);
  }

  updateDataFromForm(): void {
    const optionsGroup = this.formGroup.get('options')!.value;

    this.data.oswiadczenie = optionsGroup.StatementListESignatures.enabled ? optionsGroup.StatementListESignatures : undefined;
    this.data.oswiadczenieWeksel = optionsGroup.StatementListESignaturesBillOfExchange.enabled ? optionsGroup.StatementListESignaturesBillOfExchange : undefined;
    this.data.wyciag = optionsGroup.MKB.enabled ? { bookNumber: optionsGroup.MKB.bookNumber } : undefined;

    this.onDocumentTypeChange();
  }

  save(): void {
    this.updateDataFromForm();
    this.clientService.saveData(this.data).subscribe();
  }

  download(): void {
    this.updateDataFromForm();
    this.clientService.downloadDocuments(this.data).subscribe();
  }
}
