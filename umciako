// ===============================
// client-contracts.component.ts
// ===============================

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ClientService } from './client.service';
import { CmkowirBGKModel, DocumentFormDetail, WyciagDetail, BGKDocumentType } from './models';

@Component({
  selector: 'app-client-contracts',
  templateUrl: './client-contracts.component.html',
  styleUrls: ['./client-contracts.component.scss']
})
export class ClientContractsComponent implements OnInit {
  data!: CmkowirBGKModel;
  formGroup!: FormGroup;
  selectedContractIndex = -1;
  readonly optionKeys: BGKDocumentType[] = [
    'StatementListESignatures',
    'StatementListESignaturesBillOfExchange',
    'MKB'
  ];

  constructor(private clientService: ClientService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.clientService.getClientData().subscribe(data => {
      this.data = data;

      const contractIndex = this.data.contracts.findIndex(
        c => c.contractNumber === this.data.selectedContract?.contractNumber
      );
      this.selectedContractIndex = contractIndex >= 0 ? contractIndex : -1;

      this.initForm();
    });
  }

  initForm(): void {
    this.formGroup = this.fb.group({
      options: this.fb.group({
        StatementListESignatures: this.buildOptionFormGroup(this.data.oswiadczenie),
        StatementListESignaturesBillOfExchange: this.buildOptionFormGroup(this.data.oswiadczenieWeksel),
        MKB: this.fb.group({
          enabled: [!!this.data.wyciag?.bookNumber],
          bookNumber: [this.data.wyciag?.bookNumber ?? '']
        })
      })
    });
  }

  buildOptionFormGroup(data?: DocumentFormDetail): FormGroup {
    return this.fb.group({
      enabled: [!!data],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      }),
      hasAnnexes: [data?.hasAnnexes ?? false],
      annexes: this.fb.array((data?.annexes ?? []).map(a => this.createAnnexForm(a)))
    });
  }

  getDocumentLabel(type: BGKDocumentType): string {
    switch (type) {
      case 'StatementListESignatures':
        return 'Oświadczenie lista e-podpisów';
      case 'StatementListESignaturesBillOfExchange':
        return 'Oświadczenie lista e-podpisów - Weksel';
      case 'MKB':
        return 'Wyciąg z ksiąg banku';
      default:
        return 'Nieznany typ';
    }
  }

  createAnnexForm(data?: any): FormGroup {
    return this.fb.group({
      annexNumber: [data?.annexNumber ?? '', Validators.required],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      })
    });
  }

  getAnnexesArray(optionKey: BGKDocumentType): FormArray {
    return this.formGroup.get(['options', optionKey, 'annexes']) as FormArray;
  }

  addAnnex(optionKey: BGKDocumentType): void {
    this.getAnnexesArray(optionKey).push(this.createAnnexForm());
  }

  removeAnnex(optionKey: BGKDocumentType, index: number): void {
    this.getAnnexesArray(optionKey).removeAt(index);
  }

  editAnnex(optionKey: BGKDocumentType, index: number): void {
    const annex = this.getAnnexesArray(optionKey).at(index);
    (annex as any).markAllAsTouched();
  }

  selectContract(index: number): void {
    this.selectedContractIndex = index;
    this.data.selectedContract = this.data.contracts[index];
    this.initForm();
  }

  resetSelectedContract(): void {
    this.selectedContractIndex = -1;
    this.data.selectedContract = undefined;
    this.initForm();
  }

  isOptionEnabled(optionKey: BGKDocumentType): boolean {
    return this.formGroup.get(['options', optionKey, 'enabled'])?.value;
  }

  onDocumentTypeChange(): void {
    const optionsGroup = this.formGroup.get('options') as FormGroup;
    this.data.selectedDocumentTypes = this.optionKeys.filter(key => optionsGroup.get([key, 'enabled'])?.value);
  }

  updateDataFromForm(): void {
    const optionsGroup = this.formGroup.get('options')!.value;

    this.data.oswiadczenie = optionsGroup.StatementListESignatures.enabled ? optionsGroup.StatementListESignatures : undefined;
    this.data.oswiadczenieWeksel = optionsGroup.StatementListESignaturesBillOfExchange.enabled ? optionsGroup.StatementListESignaturesBillOfExchange : undefined;
    this.data.wyciag = optionsGroup.MKB.enabled ? { bookNumber: optionsGroup.MKB.bookNumber } : undefined;

    this.onDocumentTypeChange();
  }

  save(): void {
    this.updateDataFromForm();
    this.clientService.saveData(this.data).subscribe();
  }

  download(): void {
    this.updateDataFromForm();
    this.clientService.downloadDocuments(this.data).subscribe();
  }
}


// ===============================
// client-contracts.component.html
// ===============================

<div *ngIf="data">
  <section>
    <h2>Dane klienta</h2>
    <p><strong>Nazwa:</strong> {{ data.client.name }}</p>
    <p><strong>KKF:</strong> {{ data.client.clientNumber }}</p>
    <p><strong>REGON:</strong> {{ data.client.regon }}</p>
    <p><strong>NIP:</strong> {{ data.client.nip }}</p>
    <p><strong>Kod pocztowy:</strong> {{ data.client.postalCode }}</p>
    <p><strong>Ulica:</strong> {{ data.client.street }}</p>
    <p><strong>Miasto:</strong> {{ data.client.city }}</p>
    <p><strong>KKF:</strong> {{ data.kkf }}</p>
  </section>

  <section *ngIf="data.contracts.length > 0">
    <h2>Wybierz umowę</h2>
    <div *ngIf="selectedContractIndex === -1">
      <div *ngFor="let contract of data.contracts; let i = index">
        <label>
          <input
            type="radio"
            name="contract"
            [checked]="selectedContractIndex === i"
            (change)="selectContract(i)"
          />
          {{ contract.facility }} - {{ contract.contractNumber }} - {{ contract.accountNumber }}
          <div>
            <small>Data uruchomienia: {{ contract.lunchCreditDate | date:'yyyy-MM-dd' }}</small><br />
            <small>Numer rachunku (pełny): {{ contract.fullAccountNumber }}</small>
          </div>
        </label>
      </div>
    </div>
    <div *ngIf="selectedContractIndex !== -1">
      <p><strong>Wybrana umowa:</strong> {{ data.contracts[selectedContractIndex].facility }} - {{ data.contracts[selectedContractIndex].contractNumber }}</p>
      <p><strong>Data uruchomienia:</strong> {{ data.contracts[selectedContractIndex].lunchCreditDate | date:'yyyy-MM-dd' }}</p>
      <p><strong>Numer rachunku (pełny):</strong> {{ data.contracts[selectedContractIndex].fullAccountNumber }}</p>
      <label><strong>Data bieżąca:</strong> <input type="date" [ngModel]="data.currentDate" (ngModelChange)="data.currentDate = $event" /></label>
      <br />
      <button type="button" (click)="resetSelectedContract()">Zmień wybraną umowę</button>
    </div>
  </section>

  <form [formGroup]="formGroup">
    <section *ngIf="selectedContractIndex !== -1">
      <h3>Wygeneruj dokumenty</h3>
      <div formGroupName="options">
        <ng-container *ngFor="let key of optionKeys">
          <div [formGroupName]="key">
            <label>
              <input type="checkbox" formControlName="enabled" (change)="onDocumentTypeChange()" />
              {{ getDocumentLabel(key) }}
            </label>

            <!-- Wyciąg -->
            <ng-container *ngIf="key === bgkDocumentType.MKB && isOptionEnabled(key)">
              <label>
                Numer księgi:
                <input type="text" formControlName="bookNumber" />
              </label>
            </ng-container>

            <!-- Oświadczenia -->
            <ng-container *ngIf="key !== bgkDocumentType.MKB && isOptionEnabled(key)">
              <div>
                <label>
                  <input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia
                </label>
                <label>
                  <input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach
                </label>
              </div>

              <div *ngIf="formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="sameDayDates">
                <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
              </div>

              <div *ngIf="!formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="separateDates">
                <h6>Wniosek</h6>
                <div formGroupName="application">
                  <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                  <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                </div>
                <h6>Formularz</h6>
                <div formGroupName="form">
                  <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                  <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                </div>
              </div>

              <div>
                <p><strong>Czy do umowy został sporządzony aneks?</strong></p>
                <label><input type="radio" formControlName="hasAnnexes" [value]="true" /> Tak</label>
                <label><input type="radio" formControlName="hasAnnexes" [value]="false" /> Nie</label>
              </div>

              <div *ngIf="formGroup.get(['options', key, 'hasAnnexes'])?.value">
                <div formArrayName="annexes">
                  <div *ngFor="let annex of getAnnexesArray(key).controls; let i = index" [formGroupName]="i">
                    <label>Numer aneksu: <input type="text" formControlName="annexNumber" /></label>

                    <div>
                      <label><input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia</label>
                      <label><input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach</label>
                    </div>

                    <div *ngIf="annex.get('sameDay')?.value" formGroupName="sameDayDates">
                      <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                      <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                    </div>

                    <div *ngIf="!annex.get('sameDay')?.value" formGroupName="separateDates">
                      <h6>Wniosek</h6>
                      <div formGroupName="application">
                        <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                        <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                      </div>
                      <h6>Formularz</h6>
                      <div formGroupName="form">
                        <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                        <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                      </div>
                    </div>

                    <div>
                      <button type="button" (click)="editAnnex(key, i)">Edytuj</button>
                      <button type="button" (click)="removeAnnex(key, i)">Usuń</button>
                    </div>
                  </div>
                </div>
                <button type="button" (click)="addAnnex(key)">Dodaj aneks</button>
              </div>
            </ng-container>
          </div>
        </ng-container>
      </div>
    </section>
  </form>

  <section style="margin-top: 20px">
    <button (click)="save()">Zapisz</button>
    <button (click)="download()">Pobierz dokumenty</button>
  </section>
</div>


// ===============================
// client-contracts.component.ts
// ===============================

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ClientService } from './client.service';
import { CmkowirBGKModel, DocumentFormDetail, WyciagDetail, BGKDocumentType } from './models';

@Component({
  selector: 'app-client-contracts',
  templateUrl: './client-contracts.component.html',
  styleUrls: ['./client-contracts.component.scss']
})
export class ClientContractsComponent implements OnInit {
  data!: CmkowirBGKModel;
  formGroup!: FormGroup;
  selectedContractIndex = -1;
  readonly optionKeys: BGKDocumentType[] = [
    BGKDocumentType.StatementListESignatures,
    BGKDocumentType.StatementListESignaturesBillOfExchange,
    BGKDocumentType.MKB
  ];

  constructor(private clientService: ClientService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.clientService.getClientData().subscribe(data => {
      this.data = data;

      const contractIndex = this.data.contracts.findIndex(
        c => c.contractNumber === this.data.selectedContract?.contractNumber
      );
      this.selectedContractIndex = contractIndex >= 0 ? contractIndex : -1;

      this.initForm();
    });
  }

  initForm(): void {
    this.formGroup = this.fb.group({
      options: this.fb.group({
        [BGKDocumentType.StatementListESignatures]: this.buildOptionFormGroup(this.data.oswiadczenie),
        [BGKDocumentType.StatementListESignaturesBillOfExchange]: this.buildOptionFormGroup(this.data.oswiadczenieWeksel),
        [BGKDocumentType.MKB]: this.fb.group({
          enabled: [!!this.data.wyciag?.bookNumber],
          bookNumber: [this.data.wyciag?.bookNumber ?? '']
        })
      })
    });
  }

  buildOptionFormGroup(data?: DocumentFormDetail): FormGroup {
    return this.fb.group({
      enabled: [!!data],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      }),
      hasAnnexes: [data?.hasAnnexes ?? false],
      annexes: this.fb.array((data?.annexes ?? []).map(a => this.createAnnexForm(a)))
    });
  }

  getDocumentLabel(type: BGKDocumentType): string {
    switch (type) {
      case BGKDocumentType.StatementListESignatures:
        return 'Oświadczenie lista e-podpisów';
      case BGKDocumentType.StatementListESignaturesBillOfExchange:
        return 'Oświadczenie lista e-podpisów - Weksel';
      case BGKDocumentType.MKB:
        return 'Wyciąg z ksiąg banku';
      default:
        return 'Nieznany typ';
    }
  }

  createAnnexForm(data?: any): FormGroup {
    return this.fb.group({
      annexNumber: [data?.annexNumber ?? '', Validators.required],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      })
    });
  }

  getAnnexesArray(optionKey: BGKDocumentType): FormArray {
    return this.formGroup.get(['options', optionKey, 'annexes']) as FormArray;
  }

  addAnnex(optionKey: BGKDocumentType): void {
    this.getAnnexesArray(optionKey).push(this.createAnnexForm());
  }

  removeAnnex(optionKey: BGKDocumentType, index: number): void {
    this.getAnnexesArray(optionKey).removeAt(index);
  }

  editAnnex(optionKey: BGKDocumentType, index: number): void {
    const annex = this.getAnnexesArray(optionKey).at(index);
    (annex as any).markAllAsTouched();
  }

  selectContract(index: number): void {
    this.selectedContractIndex = index;
    this.data.selectedContract = this.data.contracts[index];
    this.initForm();
  }

  resetSelectedContract(): void {
    this.selectedContractIndex = -1;
    this.data.selectedContract = undefined;
    this.initForm();
  }

  isOptionEnabled(optionKey: BGKDocumentType): boolean {
    return this.formGroup.get(['options', optionKey, 'enabled'])?.value;
  }

  onDocumentTypeChange(): void {
    const optionsGroup = this.formGroup.get('options') as FormGroup;
    this.data.selectedDocumentTypes = this.optionKeys.filter(key => optionsGroup.get([key, 'enabled'])?.value);
  }

  updateDataFromForm(): void {
    const optionsGroup = this.formGroup.get('options')!.value;

    this.data.oswiadczenie = optionsGroup[BGKDocumentType.StatementListESignatures].enabled ? optionsGroup[BGKDocumentType.StatementListESignatures] : undefined;
    this.data.oswiadczenieWeksel = optionsGroup[BGKDocumentType.StatementListESignaturesBillOfExchange].enabled ? optionsGroup[BGKDocumentType.StatementListESignaturesBillOfExchange] : undefined;
    this.data.wyciag = optionsGroup[BGKDocumentType.MKB].enabled ? { bookNumber: optionsGroup[BGKDocumentType.MKB].bookNumber } : undefined;

    this.onDocumentTypeChange();
  }

  save(): void {
    this.updateDataFromForm();
    this.clientService.saveData(this.data).subscribe();
  }

  download(): void {
    this.updateDataFromForm();
    this.clientService.downloadDocuments(this.data).subscribe();
  }
}

66666666666666666666666666666666666666666



// ===============================
// client-contracts.component.html
// ===============================

<div *ngIf="data">
  <section>
    <h2>Dane klienta</h2>
    <p><strong>Nazwa:</strong> {{ data.client.name }}</p>
    <p><strong>KKF:</strong> {{ data.client.clientNumber }}</p>
    <p><strong>REGON:</strong> {{ data.client.regon }}</p>
    <p><strong>NIP:</strong> {{ data.client.nip }}</p>
    <p><strong>Kod pocztowy:</strong> {{ data.client.postalCode }}</p>
    <p><strong>Ulica:</strong> {{ data.client.street }}</p>
    <p><strong>Miasto:</strong> {{ data.client.city }}</p>
    <p><strong>KKF:</strong> {{ data.kkf }}</p>
  </section>

  <section *ngIf="data.contracts.length > 0">
    <h2>Wybierz umowę</h2>
    <div *ngIf="selectedContractIndex === -1">
      <div *ngFor="let contract of data.contracts; let i = index">
        <label>
          <input
            type="radio"
            name="contract"
            [checked]="selectedContractIndex === i"
            (change)="selectContract(i)"
          />
          {{ contract.facility }} - {{ contract.contractNumber }} - {{ contract.accountNumber }}
          <div>
            <small>Data uruchomienia: {{ contract.lunchCreditDate | date:'yyyy-MM-dd' }}</small><br />
            <small>Numer rachunku (pełny): {{ contract.fullAccountNumber }}</small>
          </div>
        </label>
      </div>
    </div>
    <div *ngIf="selectedContractIndex !== -1">
      <p><strong>Wybrana umowa:</strong> {{ data.contracts[selectedContractIndex].facility }} - {{ data.contracts[selectedContractIndex].contractNumber }}</p>
      <p><strong>Data uruchomienia:</strong> {{ data.contracts[selectedContractIndex].lunchCreditDate | date:'yyyy-MM-dd' }}</p>
      <p><strong>Numer rachunku (pełny):</strong> {{ data.contracts[selectedContractIndex].fullAccountNumber }}</p>
      <label><strong>Data bieżąca:</strong> <input type="date" [ngModel]="data.currentDate" (ngModelChange)="data.currentDate = $event" /></label>
      <br />
      <button type="button" (click)="resetSelectedContract()">Zmień wybraną umowę</button>
    </div>
  </section>

  <form [formGroup]="formGroup">
    <section *ngIf="selectedContractIndex !== -1">
      <h3>Wygeneruj dokumenty</h3>
      <div formGroupName="options">
        <ng-container *ngFor="let key of optionKeys">
          <label>
            <input type="checkbox" [formControlName]="key + '.enabled'" (change)="onDocumentTypeChange()" />
            {{ key === 'oswiadczenie' ? 'Oświadczenie lista e-podpisów' : key === 'oswiadczenieWeksel' ? 'Oświadczenie lista e-podpisów - Weksel' : 'Wyciąg z ksiąg banku' }}
          </label>

          <!-- Wyciąg -->
          <ng-container *ngIf="key === 'wyciag' && isOptionEnabled(key)" [formGroupName]="key">
            <label>
              Numer księgi:
              <input type="text" formControlName="bookNumber" />
            </label>
          </ng-container>

          <!-- Oświadczenia -->
          <ng-container *ngIf="key !== 'wyciag' && isOptionEnabled(key)" [formGroupName]="key">
            <div>
              <label>
                <input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia
              </label>
              <label>
                <input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach
              </label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="sameDayDates">
              <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
              <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
            </div>

            <div *ngIf="!formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="separateDates">
              <h6>Wniosek</h6>
              <div formGroupName="application">
                <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
              </div>
              <h6>Formularz</h6>
              <div formGroupName="form">
                <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
              </div>
            </div>

            <div>
              <p><strong>Czy do umowy został sporządzony aneks?</strong></p>
              <label><input type="radio" formControlName="hasAnnexes" [value]="true" /> Tak</label>
              <label><input type="radio" formControlName="hasAnnexes" [value]="false" /> Nie</label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'hasAnnexes'])?.value">
              <div formArrayName="annexes">
                <div *ngFor="let annex of getAnnexesArray(key).controls; let i = index" [formGroupName]="i">
                  <label>Numer aneksu: <input type="text" formControlName="annexNumber" /></label>

                  <div>
                    <label><input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia</label>
                    <label><input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach</label>
                  </div>

                  <div *ngIf="annex.get('sameDay')?.value" formGroupName="sameDayDates">
                    <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                    <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                  </div>

                  <div *ngIf="!annex.get('sameDay')?.value" formGroupName="separateDates">
                    <h6>Wniosek</h6>
                    <div formGroupName="application">
                      <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                      <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                    </div>
                    <h6>Formularz</h6>
                    <div formGroupName="form">
                      <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                      <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                    </div>
                  </div>

                  <div>
                    <button type="button" (click)="editAnnex(key, i)">Edytuj</button>
                    <button type="button" (click)="removeAnnex(key, i)">Usuń</button>
                  </div>
                </div>
              </div>
              <button type="button" (click)="addAnnex(key)">Dodaj aneks</button>
            </div>
          </ng-container>
        </ng-container>
      </div>
    </section>
  </form>

  <section style="margin-top: 20px">
    <button (click)="save()">Zapisz</button>
    <button (click)="download()">Pobierz dokumenty</button>
  </section>
</div>


import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ClientService } from './client.service';
import { CmkowirBGKModel, DocumentFormDetail, WyciagDetail, DocumentType } from './models';

@Component({
  selector: 'app-client-contracts',
  templateUrl: './client-contracts.component.html',
  styleUrls: ['./client-contracts.component.scss']
})
export class ClientContractsComponent implements OnInit {
  data!: CmkowirBGKModel;
  formGroup!: FormGroup;
  selectedContractIndex = -1;
  readonly optionKeys = Object.values(DocumentType);

  constructor(private clientService: ClientService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.clientService.getClientData().subscribe(data => {
      this.data = data;

      const contractIndex = this.data.contracts.findIndex(
        c => c.contractNumber === this.data.selectedContract?.contractNumber
      );
      this.selectedContractIndex = contractIndex >= 0 ? contractIndex : -1;

      this.initForm();
    });
  }

  initForm(): void {
    this.formGroup = this.fb.group({
      options: this.fb.group({
        [DocumentType.Oswiadczenie]: this.buildOptionFormGroup(this.data.oswiadczenie),
        [DocumentType.OswiadczenieWeksel]: this.buildOptionFormGroup(this.data.oswiadczenieWeksel),
        [DocumentType.Wyciag]: this.fb.group({
          enabled: [!!this.data.wyciag?.bookNumber],
          bookNumber: [this.data.wyciag?.bookNumber ?? '']
        })
      })
    });
  }

  buildOptionFormGroup(data?: DocumentFormDetail): FormGroup {
    return this.fb.group({
      enabled: [!!data],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      }),
      hasAnnexes: [data?.hasAnnexes ?? false],
      annexes: this.fb.array((data?.annexes ?? []).map(a => this.createAnnexForm(a)))
    });
  }

  createAnnexForm(data?: any): FormGroup {
    return this.fb.group({
      annexNumber: [data?.annexNumber ?? '', Validators.required],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      })
    });
  }

  getAnnexesArray(optionKey: string): FormArray {
    return this.formGroup.get(['options', optionKey, 'annexes']) as FormArray;
  }

  addAnnex(optionKey: string): void {
    this.getAnnexesArray(optionKey).push(this.createAnnexForm());
  }

  removeAnnex(optionKey: string, index: number): void {
    this.getAnnexesArray(optionKey).removeAt(index);
  }

  editAnnex(optionKey: string, index: number): void {
    const annex = this.getAnnexesArray(optionKey).at(index);
    (annex as any).markAllAsTouched();
  }

  selectContract(index: number): void {
    this.selectedContractIndex = index;
    this.data.selectedContract = this.data.contracts[index];
    this.initForm();
  }

  resetSelectedContract(): void {
    this.selectedContractIndex = -1;
    this.data.selectedContract = undefined;
    this.initForm();
  }

  isOptionEnabled(optionKey: string): boolean {
    return this.formGroup.get(['options', optionKey, 'enabled'])?.value;
  }

  onDocumentTypeChange(): void {
    const optionsGroup = this.formGroup.get('options') as FormGroup;
    this.data.selectedDocumentTypes = this.optionKeys.filter(key => optionsGroup.get([key, 'enabled'])?.value) as DocumentType[];
  }

  updateDataFromForm(): void {
    const optionsGroup = this.formGroup.get('options')!.value;

    this.data.oswiadczenie = optionsGroup[DocumentType.Oswiadczenie].enabled ? optionsGroup[DocumentType.Oswiadczenie] : undefined;
    this.data.oswiadczenieWeksel = optionsGroup[DocumentType.OswiadczenieWeksel].enabled ? optionsGroup[DocumentType.OswiadczenieWeksel] : undefined;
    this.data.wyciag = optionsGroup[DocumentType.Wyciag].enabled ? { bookNumber: optionsGroup[DocumentType.Wyciag].bookNumber } : undefined;

    this.onDocumentTypeChange();
  }

  save(): void {
    this.updateDataFromForm();
    this.clientService.saveData(this.data).subscribe();
  }

  download(): void {
    this.updateDataFromForm();
    this.clientService.downloadDocuments(this.data).subscribe();
  }
}



// ===============================
// models.ts
// ===============================

export enum DocumentType {
  Oswiadczenie = 'oswiadczenie',
  OswiadczenieWeksel = 'oswiadczenieWeksel',
  Wyciag = 'wyciag'
}

export interface CmkowirBGKModel {
  kkf: string;
  currentDate: Date;
  client: Client;
  contracts: Contract[];
  selectedContract?: Contract;
  selectedDocumentTypes: DocumentType[];
  oswiadczenie?: DocumentFormDetail;
  oswiadczenieWeksel?: DocumentFormDetail;
  wyciag?: WyciagDetail;
}

export interface Client {
  name: string;
  clientNumber: string;
  regon: string;
  nip: string;
  postalCode: string;
  street: string;
  city: string;
}

export interface Contract {
  contractNumber: string;
  facility: string;
  accountNumber: string;
  fullAccountNumber: string;
  activationDate: Date;
}

export interface WyciagDetail {
  bookNumber: string;
}

export interface DocumentFormDetail {
  sameDay: boolean;
  sameDayDates: {
    electronicDate: string;
    manualDate: string;
  };
  separateDates: {
    application: {
      electronicDate: string;
      manualDate: string;
    };
    form: {
      electronicDate: string;
      manualDate: string;
    };
  };
  hasAnnexes: boolean;
  annexes: Annex[];
}

export interface Annex {
  annexNumber: string;
  sameDay: boolean;
  sameDayDates: {
    electronicDate: string;
    manualDate: string;
  };
  separateDates: {
    application: {
      electronicDate: string;
      manualDate: string;
    };
    form: {
      electronicDate: string;
      manualDate: string;
    };
  };
}



// ===============================
// client-contracts.component.html
// ===============================

<div *ngIf="data">
  <section>
    <h2>Dane klienta</h2>
    <p><strong>Nazwa:</strong> {{ data.client.name }}</p>
    <p><strong>KKF:</strong> {{ data.client.clientNumber }}</p>
    <p><strong>REGON:</strong> {{ data.client.regon }}</p>
    <p><strong>NIP:</strong> {{ data.client.nip }}</p>
    <p><strong>Kod pocztowy:</strong> {{ data.client.postalCode }}</p>
    <p><strong>Ulica:</strong> {{ data.client.street }}</p>
    <p><strong>Miasto:</strong> {{ data.client.city }}</p>
    <p><strong>KKF:</strong> {{ data.kkf }}</p>
  </section>

  <section *ngIf="data.contracts.length > 0">
    <h2>Wybierz umowę</h2>
    <div *ngIf="selectedContractIndex === -1">
      <div *ngFor="let contract of data.contracts; let i = index">
        <label>
          <input
            type="radio"
            name="contract"
            [checked]="selectedContractIndex === i"
            (change)="selectContract(i)"
          />
          {{ contract.facility }} - {{ contract.contractNumber }} - {{ contract.accountNumber }}
          <div>
            <small>Data uruchomienia: {{ contract.activationDate | date:'yyyy-MM-dd' }}</small><br />
            <small>Numer rachunku (pełny): {{ contract.fullAccountNumber }}</small>
          </div>
        </label>
      </div>
    </div>
    <div *ngIf="selectedContractIndex !== -1">
      <p><strong>Wybrana umowa:</strong> {{ data.contracts[selectedContractIndex].facility }} - {{ data.contracts[selectedContractIndex].contractNumber }}</p>
      <p><strong>Data uruchomienia:</strong> {{ data.contracts[selectedContractIndex].activationDate | date:'yyyy-MM-dd' }}</p>
      <p><strong>Numer rachunku (pełny):</strong> {{ data.contracts[selectedContractIndex].fullAccountNumber }}</p>
      <label><strong>Data bieżąca:</strong> <input type="date" [ngModel]="data.currentDate" (ngModelChange)="data.currentDate = $event" /></label>
      <br />
      <button type="button" (click)="resetSelectedContract()">Zmień wybraną umowę</button>
    </div>
  </section>

  <form [formGroup]="formGroup">
    <section *ngIf="selectedContractIndex !== -1">
      <h3>Wygeneruj dokumenty</h3>
      <div formGroupName="options">
        <ng-container *ngFor="let key of optionKeys">
          <label>
            <input type="checkbox" [formControlName]="key + '.enabled'" (change)="onDocumentTypeChange()" />
            {{ key === 'oswiadczenie' ? 'Oświadczenie lista e-podpisów' : key === 'oswiadczenieWeksel' ? 'Oświadczenie lista e-podpisów - Weksel' : 'Wyciąg z ksiąg banku' }}
          </label>

          <!-- Wyciąg -->
          <ng-container *ngIf="key === 'wyciag' && isOptionEnabled(key)" [formGroupName]="key">
            <label>
              Numer księgi:
              <input type="text" formControlName="bookNumber" />
            </label>
          </ng-container>

          <!-- Oświadczenia -->
          <ng-container *ngIf="key !== 'wyciag' && isOptionEnabled(key)" [formGroupName]="key">
            <div>
              <label>
                <input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia
              </label>
              <label>
                <input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach
              </label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="sameDayDates">
              <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
              <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
            </div>

            <div *ngIf="!formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="separateDates">
              <h6>Wniosek</h6>
              <div formGroupName="application">
                <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
              </div>
              <h6>Formularz</h6>
              <div formGroupName="form">
                <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
              </div>
            </div>

            <div>
              <p><strong>Czy do umowy został sporządzony aneks?</strong></p>
              <label><input type="radio" formControlName="hasAnnexes" [value]="true" /> Tak</label>
              <label><input type="radio" formControlName="hasAnnexes" [value]="false" /> Nie</label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'hasAnnexes'])?.value">
              <div formArrayName="annexes">
                <div *ngFor="let annex of getAnnexesArray(key).controls; let i = index" [formGroupName]="i">
                  <label>Numer aneksu: <input type="text" formControlName="annexNumber" /></label>

                  <div>
                    <label><input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia</label>
                    <label><input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach</label>
                  </div>

                  <div *ngIf="annex.get('sameDay')?.value" formGroupName="sameDayDates">
                    <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                    <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                  </div>

                  <div *ngIf="!annex.get('sameDay')?.value" formGroupName="separateDates">
                    <h6>Wniosek</h6>
                    <div formGroupName="application">
                      <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                      <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                    </div>
                    <h6>Formularz</h6>
                    <div formGroupName="form">
                      <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                      <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                    </div>
                  </div>

                  <div>
                    <button type="button" (click)="editAnnex(key, i)">Edytuj</button>
                    <button type="button" (click)="removeAnnex(key, i)">Usuń</button>
                  </div>
                </div>
              </div>
              <button type="button" (click)="addAnnex(key)">Dodaj aneks</button>
            </div>
          </ng-container>
        </ng-container>
      </div>
    </section>
  </form>

  <section style="margin-top: 20px">
    <button (click)="save()">Zapisz</button>
    <button (click)="download()">Pobierz dokumenty</button>
  </section>
</div>


// ===============================
// client-contracts.component.ts
// ===============================

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ClientService } from './client.service';
import { CmkowirBGKModel, DocumentFormDetail, WyciagDetail } from './models';

@Component({
  selector: 'app-client-contracts',
  templateUrl: './client-contracts.component.html',
  styleUrls: ['./client-contracts.component.scss']
})
export class ClientContractsComponent implements OnInit {
  data!: CmkowirBGKModel;
  formGroup!: FormGroup;
  selectedContractIndex = -1;
  readonly optionKeys = ['oswiadczenie', 'oswiadczenieWeksel', 'wyciag'];

  constructor(private clientService: ClientService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.clientService.getClientData().subscribe(data => {
      this.data = data;

      const contractIndex = this.data.contracts.findIndex(
        c => c.contractNumber === this.data.selectedContract?.contractNumber
      );
      this.selectedContractIndex = contractIndex >= 0 ? contractIndex : -1;

      this.initForm();
    });
  }

  initForm(): void {
    this.formGroup = this.fb.group({
      options: this.fb.group({
        oswiadczenie: this.buildOptionFormGroup(this.data.oswiadczenie),
        oswiadczenieWeksel: this.buildOptionFormGroup(this.data.oswiadczenieWeksel),
        wyciag: this.fb.group({
          enabled: [!!this.data.wyciag?.bookNumber],
          bookNumber: [this.data.wyciag?.bookNumber ?? '']
        })
      })
    });
  }

  buildOptionFormGroup(data?: DocumentFormDetail): FormGroup {
    return this.fb.group({
      enabled: [!!data],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      }),
      hasAnnexes: [data?.hasAnnexes ?? false],
      annexes: this.fb.array((data?.annexes ?? []).map(a => this.createAnnexForm(a)))
    });
  }

  createAnnexForm(data?: any): FormGroup {
    return this.fb.group({
      annexNumber: [data?.annexNumber ?? '', Validators.required],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      })
    });
  }

  getAnnexesArray(optionKey: string): FormArray {
    return this.formGroup.get(['options', optionKey, 'annexes']) as FormArray;
  }

  addAnnex(optionKey: string): void {
    this.getAnnexesArray(optionKey).push(this.createAnnexForm());
  }

  removeAnnex(optionKey: string, index: number): void {
    this.getAnnexesArray(optionKey).removeAt(index);
  }

  editAnnex(optionKey: string, index: number): void {
    const annex = this.getAnnexesArray(optionKey).at(index);
    (annex as any).markAllAsTouched();
  }

  selectContract(index: number): void {
    this.selectedContractIndex = index;
    this.formGroup = this.fb.group({
      options: this.fb.group({
        oswiadczenie: this.buildOptionFormGroup(),
        oswiadczenieWeksel: this.buildOptionFormGroup(),
        wyciag: this.fb.group({
          enabled: [false],
          bookNumber: ['']
        })
      })
    });
    this.data.selectedContract = this.data.contracts[index];
  }

  resetSelectedContract(): void {
    this.selectedContractIndex = -1;
    this.formGroup.reset();
    this.data.selectedContract = undefined;
  }

  isOptionEnabled(optionKey: string): boolean {
    return this.formGroup.get(['options', optionKey, 'enabled'])?.value;
  }

  onDocumentTypeChange(): void {
    const optionsGroup = this.formGroup.get('options') as FormGroup;
    this.data.selectedDocumentTypes = this.optionKeys.filter(key => optionsGroup.get([key, 'enabled'])?.value);
  }

  updateDataFromForm(): void {
    const optionsGroup = this.formGroup.get('options')!.value;

    this.data.oswiadczenie = optionsGroup.oswiadczenie.enabled ? optionsGroup.oswiadczenie : undefined;
    this.data.oswiadczenieWeksel = optionsGroup.oswiadczenieWeksel.enabled ? optionsGroup.oswiadczenieWeksel : undefined;
    this.data.wyciag = optionsGroup.wyciag.enabled ? { bookNumber: optionsGroup.wyciag.bookNumber } : undefined;

    this.onDocumentTypeChange();
  }

  save(): void {
    this.updateDataFromForm();
    this.clientService.saveData(this.data).subscribe();
  }

  download(): void {
    this.updateDataFromForm();
    this.clientService.downloadDocuments(this.data).subscribe();
  }
}


//--------------------------------------------




// ===============================
// models.ts
// ===============================

export interface CmkowirBGKModel {
  kkf: string;
  currentDate: Date;
  client: Client;
  contracts: Contract[];
  selectedContract: Contract;

  oswiadczenie?: DocumentFormDetail;
  oswiadczenieWeksel?: DocumentFormDetail;
  wyciag?: WyciagDetail;
}

export interface Client {
  name: string;
  clientNumber: string;
  regon: string;
  nip: string;
  postalCode: string;
  street: string;
  city: string;
}

export interface Contract {
  facility: string;
  contractNumber: string;
  accountNumber: string;
}

export interface DocumentSignatureDates {
  sameDay: boolean;
  sameDayDates?: {
    electronicDate: string;
    manualDate: string;
  };
  separateDates?: {
    application: {
      electronicDate: string;
      manualDate: string;
    };
    form: {
      electronicDate: string;
      manualDate: string;
    };
  };
}

export interface Annex extends DocumentSignatureDates {
  annexNumber: string;
}

export interface DocumentFormDetail extends DocumentSignatureDates {
  hasAnnexes?: boolean;
  annexes?: Annex[];
}

export interface WyciagDetail {
  bookNumber: string;
}


// ===============================
// client.service.ts
// ===============================

import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { CmkowirBGKModel } from './models';

@Injectable({
  providedIn: 'root'
})
export class ClientService {
  getClientData(): Observable<CmkowirBGKModel> {
    return of({
      kkf: 'KKF-2025-07',
      currentDate: new Date(),
      client: {
        name: 'Jan Kowalski',
        clientNumber: 'C123456',
        regon: '123456789',
        nip: '9876543210',
        postalCode: '00-123',
        street: 'ul. Przykładowa 1',
        city: 'Warszawa'
      },
      contracts: [
        {
          facility: 'Obiekt A',
          contractNumber: 'U001',
          accountNumber: '12345678901234567890123456'
        },
        {
          facility: 'Obiekt B',
          contractNumber: 'U002',
          accountNumber: '23456789012345678901234567'
        }
      ],
      selectedContract: {
        facility: 'Obiekt A',
        contractNumber: 'U001',
        accountNumber: '12345678901234567890123456'
      },
      oswiadczenie: undefined,
      oswiadczenieWeksel: undefined,
      wyciag: undefined
    });
  }

  saveData(model: CmkowirBGKModel): Observable<void> {
    console.log('Zapisuję dane do API:', model);
    return of();
  }

  downloadDocuments(model: CmkowirBGKModel): Observable<void> {
    console.log('Pobieram dokumenty na podstawie danych:', model);
    return of();
  }
}


// ===============================
// DTO .NET (C#)
// ===============================

public class CmkowirBGKModel
{
    public string Kkf { get; set; }
    public DateTime CurrentDate { get; set; }
    public Client Client { get; set; }
    public List<Contract> Contracts { get; set; }
    public Contract SelectedContract { get; set; }

    public DocumentFormDetail Oswiadczenie { get; set; }
    public DocumentFormDetail OswiadczenieWeksel { get; set; }
    public WyciagDetail Wyciag { get; set; }
}

public class Client
{
    public string Name { get; set; }
    public string ClientNumber { get; set; }
    public string Regon { get; set; }
    public string Nip { get; set; }
    public string PostalCode { get; set; }
    public string Street { get; set; }
    public string City { get; set; }
}

public class Contract
{
    public string Facility { get; set; }
    public string ContractNumber { get; set; }
    public string AccountNumber { get; set; }
}

public class DocumentFormDetail
{
    public bool SameDay { get; set; }
    public SameDayDates SameDayDates { get; set; }
    public SeparateDates SeparateDates { get; set; }
    public bool? HasAnnexes { get; set; }
    public List<Annex> Annexes { get; set; }
}

public class SameDayDates
{
    public string ElectronicDate { get; set; }
    public string ManualDate { get; set; }
}

public class SeparateDates
{
    public SignatureDates Application { get; set; }
    public SignatureDates Form { get; set; }
}

public class SignatureDates
{
    public string ElectronicDate { get; set; }
    public string ManualDate { get; set; }
}

public class Annex
{
    public string AnnexNumber { get; set; }
    public bool SameDay { get; set; }
    public SameDayDates SameDayDates { get; set; }
    public SeparateDates SeparateDates { get; set; }
}

public class WyciagDetail
{
    public string BookNumber { get; set; }
}


// ===============================
// client-contracts.component.ts
// ===============================

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ClientService } from './client.service';
import { CmkowirBGKModel, DocumentFormDetail, WyciagDetail } from './models';

@Component({
  selector: 'app-client-contracts',
  templateUrl: './client-contracts.component.html',
  styleUrls: ['./client-contracts.component.scss']
})
export class ClientContractsComponent implements OnInit {
  model!: CmkowirBGKModel;
  formGroup!: FormGroup;
  selectedContractIndex = -1;
  readonly optionKeys = ['oswiadczenie', 'oswiadczenieWeksel', 'wyciag'];

  constructor(private clientService: ClientService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.clientService.getClientData().subscribe(data => {
      this.model = data;

      const contractIndex = this.model.contracts.findIndex(
        c => c.contractNumber === this.model.selectedContract.contractNumber
      );
      this.selectedContractIndex = contractIndex >= 0 ? contractIndex : -1;

      this.initForm();
    });
  }

  initForm(): void {
    this.formGroup = this.fb.group({
      options: this.fb.group({
        oswiadczenie: this.buildOptionFormGroup(this.model.oswiadczenie),
        oswiadczenieWeksel: this.buildOptionFormGroup(this.model.oswiadczenieWeksel),
        wyciag: this.fb.group({
          enabled: [!!this.model.wyciag?.bookNumber],
          bookNumber: [this.model.wyciag?.bookNumber ?? '']
        })
      })
    });
  }

  buildOptionFormGroup(data?: DocumentFormDetail): FormGroup {
    return this.fb.group({
      enabled: [!!data],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      }),
      hasAnnexes: [data?.hasAnnexes ?? false],
      annexes: this.fb.array((data?.annexes ?? []).map(a => this.createAnnexForm(a)))
    });
  }

  createAnnexForm(data?: any): FormGroup {
    return this.fb.group({
      annexNumber: [data?.annexNumber ?? '', Validators.required],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      })
    });
  }

  getAnnexesArray(optionKey: string): FormArray {
    return this.formGroup.get(['options', optionKey, 'annexes']) as FormArray;
  }

  addAnnex(optionKey: string): void {
    this.getAnnexesArray(optionKey).push(this.createAnnexForm());
  }

  removeAnnex(optionKey: string, index: number): void {
    this.getAnnexesArray(optionKey).removeAt(index);
  }

  editAnnex(optionKey: string, index: number): void {
    const annex = this.getAnnexesArray(optionKey).at(index);
    // domyślnie formularz pozwala na edycję więc wystarczy go zaznaczyć np. scrollIntoView
    (annex as any).markAllAsTouched();
  }

  selectContract(index: number): void {
    this.selectedContractIndex = index;
    // wyczyść dane zależne od umowy
    this.formGroup = this.fb.group({
      options: this.fb.group({
        oswiadczenie: this.buildOptionFormGroup(),
        oswiadczenieWeksel: this.buildOptionFormGroup(),
        wyciag: this.fb.group({
          enabled: [false],
          bookNumber: ['']
        })
      })
    });
  }

  resetSelectedContract(): void {
    this.selectedContractIndex = -1;
    this.formGroup.reset();
  }

  isOptionEnabled(optionKey: string): boolean {
    return this.formGroup.get(['options', optionKey, 'enabled'])?.value;
  }

  updateModelFromForm(): void {
    const optionsGroup = this.formGroup.get('options')!.value;

    this.model.selectedContract = this.model.contracts[this.selectedContractIndex];

    this.model.oswiadczenie = optionsGroup.oswiadczenie.enabled ? optionsGroup.oswiadczenie : undefined;
    this.model.oswiadczenieWeksel = optionsGroup.oswiadczenieWeksel.enabled ? optionsGroup.oswiadczenieWeksel : undefined;
    this.model.wyciag = optionsGroup.wyciag.enabled ? { bookNumber: optionsGroup.wyciag.bookNumber } : undefined;
  }

  save(): void {
    this.updateModelFromForm();
    this.clientService.saveData(this.model).subscribe();
  }

  download(): void {
    this.updateModelFromForm();
    this.clientService.downloadDocuments(this.model).subscribe();
  }
}

// ===============================
// client-contracts.component.html
// ===============================

// ===============================
// client-contracts.component.html
// ===============================

<div *ngIf="model">
  <section>
    <h2>Dane klienta</h2>
    <p><strong>Nazwa:</strong> {{ model.client.name }}</p>
    <p><strong>Numer klienta:</strong> {{ model.client.clientNumber }}</p>
    <p><strong>REGON:</strong> {{ model.client.regon }}</p>
    <p><strong>NIP:</strong> {{ model.client.nip }}</p>
    <p><strong>Kod pocztowy:</strong> {{ model.client.postalCode }}</p>
    <p><strong>Ulica:</strong> {{ model.client.street }}</p>
    <p><strong>Miasto:</strong> {{ model.client.city }}</p>
    <p><strong>KKF:</strong> {{ model.kkf }}</p>
    <p><strong>Data bieżąca:</strong> {{ model.currentDate | date:'yyyy-MM-dd' }}</p>
  </section>

  <section *ngIf="model.contracts.length > 0">
    <h2>Wybierz umowę</h2>
    <div *ngIf="selectedContractIndex === -1">
      <div *ngFor="let contract of model.contracts; let i = index">
        <label>
          <input
            type="radio"
            name="contract"
            [checked]="selectedContractIndex === i"
            (change)="selectContract(i)"
          />
          {{ contract.facility }} - {{ contract.contractNumber }} - {{ contract.accountNumber }}
        </label>
      </div>
    </div>
    <div *ngIf="selectedContractIndex !== -1">
      <p><strong>Wybrana umowa:</strong> {{ model.contracts[selectedContractIndex].facility }} - {{ model.contracts[selectedContractIndex].contractNumber }}</p>
      <button type="button" (click)="resetSelectedContract()">Zmień wybraną umowę</button>
    </div>
  </section>

  <form [formGroup]="formGroup">
    <section *ngIf="selectedContractIndex !== -1">
      <h3>Wygeneruj dokumenty</h3>
      <div formGroupName="options">
        <ng-container *ngFor="let key of optionKeys">
          <label>
            <input type="checkbox" [formControlName]="key + '.enabled'" />
            {{ key === 'oswiadczenie' ? 'Oświadczenie lista e-podpisów' : key === 'oswiadczenieWeksel' ? 'Oświadczenie lista e-podpisów - Weksel' : 'Wyciąg z ksiąg banku' }}
          </label>

          <!-- Wyciąg -->
          <ng-container *ngIf="key === 'wyciag' && isOptionEnabled(key)" [formGroupName]="key">
            <label>
              Numer księgi:
              <input type="text" formControlName="bookNumber" />
            </label>
          </ng-container>

          <!-- Oświadczenia -->
          <ng-container *ngIf="key !== 'wyciag' && isOptionEnabled(key)" [formGroupName]="key">
            <div>
              <label>
                <input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia
              </label>
              <label>
                <input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach
              </label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="sameDayDates">
              <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
              <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
            </div>

            <div *ngIf="!formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="separateDates">
              <h6>Wniosek</h6>
              <div formGroupName="application">
                <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
              </div>
              <h6>Formularz</h6>
              <div formGroupName="form">
                <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
              </div>
            </div>

            <div>
              <p><strong>Czy do umowy został sporządzony aneks?</strong></p>
              <label><input type="radio" formControlName="hasAnnexes" [value]="true" /> Tak</label>
              <label><input type="radio" formControlName="hasAnnexes" [value]="false" /> Nie</label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'hasAnnexes'])?.value">
              <div formArrayName="annexes">
                <div *ngFor="let annex of getAnnexesArray(key).controls; let i = index" [formGroupName]="i">
                  <label>Numer aneksu: <input type="text" formControlName="annexNumber" /></label>

                  <div>
                    <label><input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia</label>
                    <label><input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach</label>
                  </div>

                  <div *ngIf="annex.get('sameDay')?.value" formGroupName="sameDayDates">
                    <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                    <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                  </div>

                  <div *ngIf="!annex.get('sameDay')?.value" formGroupName="separateDates">
                    <h6>Wniosek</h6>
                    <div formGroupName="application">
                      <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                      <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                    </div>
                    <h6>Formularz</h6>
                    <div formGroupName="form">
                      <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                      <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                    </div>
                  </div>

                  <div>
                    <button type="button" (click)="editAnnex(key, i)">Edytuj</button>
                    <button type="button" (click)="removeAnnex(key, i)">Usuń</button>
                  </div>
                </div>
              </div>
              <button type="button" (click)="addAnnex(key)">Dodaj aneks</button>
            </div>
          </ng-container>
        </ng-container>
      </div>
    </section>
  </form>

  <section style="margin-top: 20px">
    <button (click)="save()">Zapisz</button>
    <button (click)="download()">Pobierz dokumenty</button>
  </section>
</div>





****************************************

// ===============================
// models.ts
// ===============================

export interface CmkowirBGKModel {
  kkf: string;
  currentDate: Date;
  client: Client;
  contracts: Contract[];
  selectedContract: Contract;

  oswiadczenie?: DocumentFormDetail;
  oswiadczenieWeksel?: DocumentFormDetail;
  wyciag?: WyciagDetail;
}

export interface Client {
  name: string;
  clientNumber: string;
  regon: string;
  nip: string;
  postalCode: string;
  street: string;
  city: string;
}

export interface Contract {
  facility: string;
  contractNumber: string;
  accountNumber: string;
}

export interface DocumentSignatureDates {
  sameDay: boolean;
  sameDayDates?: {
    electronicDate: string;
    manualDate: string;
  };
  separateDates?: {
    application: {
      electronicDate: string;
      manualDate: string;
    };
    form: {
      electronicDate: string;
      manualDate: string;
    };
  };
}

export interface Annex extends DocumentSignatureDates {
  annexNumber: string;
}

export interface DocumentFormDetail extends DocumentSignatureDates {
  hasAnnexes?: boolean;
  annexes?: Annex[];
}

export interface WyciagDetail {
  bookNumber: string;
}


// ===============================
// client.service.ts
// ===============================

import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { CmkowirBGKModel } from './models';

@Injectable({
  providedIn: 'root'
})
export class ClientService {
  getClientData(): Observable<CmkowirBGKModel> {
    return of({
      kkf: 'KKF-2025-07',
      currentDate: new Date(),
      client: {
        name: 'Jan Kowalski',
        clientNumber: 'C123456',
        regon: '123456789',
        nip: '9876543210',
        postalCode: '00-123',
        street: 'ul. Przykładowa 1',
        city: 'Warszawa'
      },
      contracts: [
        {
          facility: 'Obiekt A',
          contractNumber: 'U001',
          accountNumber: '12345678901234567890123456'
        },
        {
          facility: 'Obiekt B',
          contractNumber: 'U002',
          accountNumber: '23456789012345678901234567'
        }
      ],
      selectedContract: {
        facility: 'Obiekt A',
        contractNumber: 'U001',
        accountNumber: '12345678901234567890123456'
      },
      oswiadczenie: undefined,
      oswiadczenieWeksel: undefined,
      wyciag: undefined
    });
  }

  saveData(model: CmkowirBGKModel): Observable<void> {
    console.log('Zapisuję dane do API:', model);
    return of();
  }

  downloadDocuments(model: CmkowirBGKModel): Observable<void> {
    console.log('Pobieram dokumenty na podstawie danych:', model);
    return of();
  }
}


// ===============================
// DTO .NET (C#)
// ===============================

public class CmkowirBGKModel
{
    public string Kkf { get; set; }
    public DateTime CurrentDate { get; set; }
    public Client Client { get; set; }
    public List<Contract> Contracts { get; set; }
    public Contract SelectedContract { get; set; }

    public DocumentFormDetail Oswiadczenie { get; set; }
    public DocumentFormDetail OswiadczenieWeksel { get; set; }
    public WyciagDetail Wyciag { get; set; }
}

public class Client
{
    public string Name { get; set; }
    public string ClientNumber { get; set; }
    public string Regon { get; set; }
    public string Nip { get; set; }
    public string PostalCode { get; set; }
    public string Street { get; set; }
    public string City { get; set; }
}

public class Contract
{
    public string Facility { get; set; }
    public string ContractNumber { get; set; }
    public string AccountNumber { get; set; }
}

public class DocumentFormDetail
{
    public bool SameDay { get; set; }
    public SameDayDates SameDayDates { get; set; }
    public SeparateDates SeparateDates { get; set; }
    public bool? HasAnnexes { get; set; }
    public List<Annex> Annexes { get; set; }
}

public class SameDayDates
{
    public string ElectronicDate { get; set; }
    public string ManualDate { get; set; }
}

public class SeparateDates
{
    public SignatureDates Application { get; set; }
    public SignatureDates Form { get; set; }
}

public class SignatureDates
{
    public string ElectronicDate { get; set; }
    public string ManualDate { get; set; }
}

public class Annex
{
    public string AnnexNumber { get; set; }
    public bool SameDay { get; set; }
    public SameDayDates SameDayDates { get; set; }
    public SeparateDates SeparateDates { get; set; }
}

public class WyciagDetail
{
    public string BookNumber { get; set; }
}


// ===============================
// client-contracts.component.ts
// ===============================

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ClientService } from './client.service';
import { CmkowirBGKModel, DocumentFormDetail, WyciagDetail } from './models';

@Component({
  selector: 'app-client-contracts',
  templateUrl: './client-contracts.component.html',
  styleUrls: ['./client-contracts.component.scss']
})
export class ClientContractsComponent implements OnInit {
  model!: CmkowirBGKModel;
  formGroup!: FormGroup;
  selectedContractIndex = -1;
  readonly optionKeys = ['oswiadczenie', 'oswiadczenieWeksel', 'wyciag'];

  constructor(private clientService: ClientService, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.clientService.getClientData().subscribe(data => {
      this.model = data;

      const contractIndex = this.model.contracts.findIndex(
        c => c.contractNumber === this.model.selectedContract.contractNumber
      );
      this.selectedContractIndex = contractIndex >= 0 ? contractIndex : -1;

      this.initForm();
    });
  }

  initForm(): void {
    this.formGroup = this.fb.group({
      options: this.fb.group({
        oswiadczenie: this.buildOptionFormGroup(this.model.oswiadczenie),
        oswiadczenieWeksel: this.buildOptionFormGroup(this.model.oswiadczenieWeksel),
        wyciag: this.fb.group({
          enabled: [!!this.model.wyciag?.bookNumber],
          bookNumber: [this.model.wyciag?.bookNumber ?? '']
        })
      })
    });
  }

  buildOptionFormGroup(data?: DocumentFormDetail): FormGroup {
    return this.fb.group({
      enabled: [!!data],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      }),
      hasAnnexes: [data?.hasAnnexes ?? false],
      annexes: this.fb.array((data?.annexes ?? []).map(a => this.createAnnexForm(a)))
    });
  }

  createAnnexForm(data?: any): FormGroup {
    return this.fb.group({
      annexNumber: [data?.annexNumber ?? '', Validators.required],
      sameDay: [data?.sameDay ?? true],
      sameDayDates: this.fb.group({
        electronicDate: [data?.sameDayDates?.electronicDate ?? ''],
        manualDate: [data?.sameDayDates?.manualDate ?? '']
      }),
      separateDates: this.fb.group({
        application: this.fb.group({
          electronicDate: [data?.separateDates?.application.electronicDate ?? ''],
          manualDate: [data?.separateDates?.application.manualDate ?? '']
        }),
        form: this.fb.group({
          electronicDate: [data?.separateDates?.form.electronicDate ?? ''],
          manualDate: [data?.separateDates?.form.manualDate ?? '']
        })
      })
    });
  }

  getAnnexesArray(optionKey: string): FormArray {
    return this.formGroup.get(['options', optionKey, 'annexes']) as FormArray;
  }

  addAnnex(optionKey: string): void {
    this.getAnnexesArray(optionKey).push(this.createAnnexForm());
  }

  selectContract(index: number): void {
    this.selectedContractIndex = index;
  }

  isOptionEnabled(optionKey: string): boolean {
    return this.formGroup.get(['options', optionKey, 'enabled'])?.value;
  }

  updateModelFromForm(): void {
    const optionsGroup = this.formGroup.get('options')!.value;

    this.model.selectedContract = this.model.contracts[this.selectedContractIndex];

    this.model.oswiadczenie = optionsGroup.oswiadczenie.enabled ? optionsGroup.oswiadczenie : undefined;
    this.model.oswiadczenieWeksel = optionsGroup.oswiadczenieWeksel.enabled ? optionsGroup.oswiadczenieWeksel : undefined;
    this.model.wyciag = optionsGroup.wyciag.enabled ? { bookNumber: optionsGroup.wyciag.bookNumber } : undefined;
  }

  save(): void {
    this.updateModelFromForm();
    this.clientService.saveData(this.model).subscribe();
  }

  download(): void {
    this.updateModelFromForm();
    this.clientService.downloadDocuments(this.model).subscribe();
  }
}

// ===============================
// client-contracts.component.html
// ===============================

<div *ngIf="model">
  <section>
    <h2>Dane klienta</h2>
    <p><strong>Nazwa:</strong> {{ model.client.name }}</p>
    <p><strong>Numer klienta:</strong> {{ model.client.clientNumber }}</p>
    <p><strong>REGON:</strong> {{ model.client.regon }}</p>
    <p><strong>NIP:</strong> {{ model.client.nip }}</p>
    <p><strong>Kod pocztowy:</strong> {{ model.client.postalCode }}</p>
    <p><strong>Ulica:</strong> {{ model.client.street }}</p>
    <p><strong>Miasto:</strong> {{ model.client.city }}</p>
    <p><strong>KKF:</strong> {{ model.kkf }}</p>
    <p><strong>Data bieżąca:</strong> {{ model.currentDate | date:'yyyy-MM-dd' }}</p>
  </section>

  <section *ngIf="model.contracts.length > 0">
    <h2>Wybierz umowę</h2>
    <div *ngFor="let contract of model.contracts; let i = index">
      <label>
        <input
          type="radio"
          name="contract"
          [checked]="selectedContractIndex === i"
          (change)="selectContract(i)"
        />
        {{ contract.facility }} - {{ contract.contractNumber }} - {{ contract.accountNumber }}
      </label>
    </div>
  </section>

  <form [formGroup]="formGroup">
    <section *ngIf="selectedContractIndex !== -1">
      <h3>Wygeneruj dokumenty</h3>
      <div formGroupName="options">
        <div *ngFor="let key of optionKeys">
          <label>
            <input type="checkbox" [formControlName]="key + '.enabled'" />
            {{ key === 'oswiadczenie' ? 'Oświadczenie lista e-podpisów' : key === 'oswiadczenieWeksel' ? 'Oświadczenie lista e-podpisów - Weksel' : 'Wyciąg z ksiąg banku' }}
          </label>

          <!-- Wyciąg -->
          <div *ngIf="key === 'wyciag' && isOptionEnabled(key)" [formGroupName]="key">
            <label>
              Numer księgi:
              <input type="text" formControlName="bookNumber" />
            </label>
          </div>

          <!-- Oświadczenia -->
          <div *ngIf="key !== 'wyciag' && isOptionEnabled(key)" [formGroupName]="key">
            <div>
              <label>
                <input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia
              </label>
              <label>
                <input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach
              </label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="sameDayDates">
              <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
              <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
            </div>

            <div *ngIf="!formGroup.get(['options', key, 'sameDay'])?.value" formGroupName="separateDates">
              <h6>Wniosek</h6>
              <div formGroupName="application">
                <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
              </div>
              <h6>Formularz</h6>
              <div formGroupName="form">
                <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
              </div>
            </div>

            <div>
              <p><strong>Czy do umowy został sporządzony aneks?</strong></p>
              <label><input type="radio" formControlName="hasAnnexes" [value]="true" /> Tak</label>
              <label><input type="radio" formControlName="hasAnnexes" [value]="false" /> Nie</label>
            </div>

            <div *ngIf="formGroup.get(['options', key, 'hasAnnexes'])?.value">
              <div formArrayName="annexes">
                <div *ngFor="let annex of getAnnexesArray(key).controls; let i = index" [formGroupName]="i">
                  <label>Numer aneksu: <input type="text" formControlName="annexNumber" /></label>

                  <div>
                    <label><input type="radio" formControlName="sameDay" [value]="true" /> Podpisane tego samego dnia</label>
                    <label><input type="radio" formControlName="sameDay" [value]="false" /> Podpisane w różnych dniach</label>
                  </div>

                  <div *ngIf="annex.get('sameDay')?.value" formGroupName="sameDayDates">
                    <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                    <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                  </div>

                  <div *ngIf="!annex.get('sameDay')?.value" formGroupName="separateDates">
                    <h6>Wniosek</h6>
                    <div formGroupName="application">
                      <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                      <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                    </div>
                    <h6>Formularz</h6>
                    <div formGroupName="form">
                      <label>Data podpisu elektronicznego: <input type="date" formControlName="electronicDate" /></label>
                      <label>Data podpisu manualnego: <input type="date" formControlName="manualDate" /></label>
                    </div>
                  </div>
                </div>
              </div>
              <button type="button" (click)="addAnnex(key)">Dodaj aneks</button>
            </div>
          </div>
        </div>
      </div>
    </section>
  </form>

  <section style="margin-top: 20px">
    <button (click)="save()">Zapisz</button>
    <button (click)="download()">Pobierz dokumenty</button>
  </section>
</div>




------------------

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent {
  registrationForm: FormGroup;

  constructor(private fb: FormBuilder) {
    // Initialize the form with validation rules
    this.registrationForm = this.fb.group({
      firstName: ['', [Validators.required, Validators.minLength(2)]],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      acceptTerms: [false, [Validators.requiredTrue]]
    });
  }

  // Shortcut getter for easier access to form controls
  get f() {
    return this.registrationForm.controls;
  }

  onSubmit(): void {
    if (this.registrationForm.invalid) {
      this.registrationForm.markAllAsTouched();
      return;
    }

    const formData = this.registrationForm.value;

    // Here you would typically send formData to a backend API
    console.log('Form submitted:', formData);
  }
}


/-------------------------

@use "sass:math";

// 📐 Breakpointy i maksymalne szerokości kontenera
$container-breakpoints: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

// 🔧 Padding poziomy (stały)
$container-padding-x: 16px;

// ------------------------------
// GŁÓWNY CONTAINER
// ------------------------------

.container {
  width: 100%;
  padding-left: $container-padding-x;
  padding-right: $container-padding-x;
  margin-left: auto;
  margin-right: auto;

  // Responsywne max-widthy
  @each $breakpoint, $max-width in $container-breakpoints {
    @media (min-width: #{strip-unit($max-width) + 60}px) {
      max-width: $max-width;
    }
  }
}



@use "sass:math";

// ------------------------------
// Konfiguracja
// ------------------------------
$grid-columns: 12;

$grid-gutters: (
  xs: 4px,
  sm: 8px,
  md: 16px,
  lg: 24px
);

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// ------------------------------
// ROW
// ------------------------------
.row {
  display: flex;
  flex-wrap: wrap;

  $default-gutter: map-get($grid-gutters, md);
  margin-left: math.div(-$default-gutter, 2);
  margin-right: math.div(-$default-gutter, 2);

  > [class*="col-"] {
    padding-left: math.div($default-gutter, 2);
    padding-right: math.div($default-gutter, 2);
  }
}

// ------------------------------
// GAP VARIANTS (gap-xs, gap-md...)
// ------------------------------
@each $size, $gap in $grid-gutters {
  .gap-#{$size} {
    margin-left: math.div(-$gap, 2);
    margin-right: math.div(-$gap, 2);

    > [class*="col-"] {
      padding-left: math.div($gap, 2);
      padding-right: math.div($gap, 2);
    }
  }
}

// ------------------------------
// NO-GUTTERS
// ------------------------------
.no-gutters {
  margin-left: 0;
  margin-right: 0;

  > [class*="col-"] {
    padding-left: 0;
    padding-right: 0;
  }
}

// ------------------------------
// BAZOWE KOLUMNY (flex-growable col-* fallback)
// ------------------------------
[class*="col-"] {
  flex: 1 0 0%;
  min-width: 0;
}

// ------------------------------
// col-[breakpoint]-[1..12]
// offset-[breakpoint]-[1..11]
// ------------------------------
@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{math.div($i, $grid-columns) * 100}%;
        max-width: #{math.div($i, $grid-columns) * 100}%;
      }

      @if $i < $grid-columns {
        .offset-#{$breakpoint}-#{$i} {
          margin-left: #{math.div($i, $grid-columns) * 100}%;
        }
      }
    }
  }
}


// =======================
// GRID SYSTEM CONFIG
// =======================

$grid-columns: 12;

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

$grid-gutters: (
  xs: 4px,
  sm: 8px,
  md: 16px,
  lg: 24px
);

// =======================
// BASE RESET
// =======================

*,
*::before,
*::after {
  box-sizing: border-box;
}

// =======================
// ROW
// =======================

.row {
  display: flex;
  flex-wrap: wrap;

  $default-gutter: map-get($grid-gutters, md);
  margin-left: -$default-gutter / 2;
  margin-right: -$default-gutter / 2;

  > [class*="col-"] {
    padding-left: $default-gutter / 2;
    padding-right: $default-gutter / 2;
  }
}

// =======================
// GAP HELPERS
// =======================

@each $size, $gap in $grid-gutters {
  .gap-#{$size} {
    margin-left: -$gap / 2;
    margin-right: -$gap / 2;

    > [class*="col-"] {
      padding-left: $gap / 2;
      padding-right: $gap / 2;
    }
  }
}

// =======================
// NO-GUTTERS
// =======================

.no-gutters {
  margin-left: 0;
  margin-right: 0;

  > [class*="col-"] {
    padding-left: 0;
    padding-right: 0;
  }
}

// =======================
// FALLBACK COL – full width by default
// =======================

[class*="col-"] {
  width: 100%;
}

// =======================
// RESPONSIVE COLUMNS & OFFSETS
// =======================

@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{($i / $grid-columns) * 100}%;
        max-width: #{($i / $grid-columns) * 100}%;
      }

      @if $i < $grid-columns {
        .offset-#{$breakpoint}-#{$i} {
          margin-left: #{($i / $grid-columns) * 100}%;
        }
      }
    }
  }
}

// =======================
// FLEX HELPERS
// =======================

// Automatic grow to fill remaining space
.col {
  flex: 1 1 0%;
  min-width: 0;
  max-width: 100%;
}

// Shrink to fit content
.col-auto {
  flex: 0 0 auto;
  width: auto;
  max-width: none;
}

// Order helpers
@for $i from 0 through 12 {
  .order-#{$i} {
    order: $i;
  }
}

.order-first {
  order: -1;
}

.order-last {
  order: 999;
}

// Justify content (horizontal alignment for .row)
.justify-content-start    { justify-content: flex-start; }
.justify-content-end      { justify-content: flex-end; }
.justify-content-center   { justify-content: center; }
.justify-content-between  { justify-content: space-between; }
.justify-content-around   { justify-content: space-around; }
.justify-content-evenly   { justify-content: space-evenly; }



// ⚙️ Zmienne
$grid-columns: 12;

$grid-gutters: (
  xs: 4px,
  sm: 8px,
  md: 16px,
  lg: 24px
);

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// ✅ ROW
.row {
  display: flex;
  flex-wrap: wrap;

  $default-gutter: map-get($grid-gutters, md);
  margin-left: -$default-gutter / 2;
  margin-right: -$default-gutter / 2;

  > [class*="col-"] {
    padding-left: $default-gutter / 2;
    padding-right: $default-gutter / 2;
  }
}

// ✅ GAP VARIANTS
@each $size, $gap in $grid-gutters {
  .gap-#{$size} {
    margin-left: -$gap / 2;
    margin-right: -$gap / 2;

    > [class*="col-"] {
      padding-left: $gap / 2;
      padding-right: $gap / 2;
    }
  }
}

// ✅ NO-GUTTERS
.no-gutters {
  margin-left: 0;
  margin-right: 0;

  > [class*="col-"] {
    padding-left: 0;
    padding-right: 0;
  }
}

// ✅ Kolumny (dla fallbacków lub kiedy nie podano rozmiaru)
[class*="col-"] {
  flex: 1 0 0%;
  min-width: 0;
}

// ✅ Kolumny i offsety per breakpoint
@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{($i / $grid-columns) * 100}%;
        max-width: #{($i / $grid-columns) * 100}%;
      }

      @if $i < $grid-columns {
        .offset-#{$breakpoint}-#{$i} {
          margin-left: #{($i / $grid-columns) * 100}%;
        }
      }
    }
  }
}


-------------

// 📏 Kolumny i breakpointy
$grid-columns: 12;

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// 🔧 Gutter domyślny
$gutter-x: 16px;

// ✅ Globalny box-sizing
*,
*::before,
*::after {
  box-sizing: border-box;
}

// 🧱 ROW
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -($gutter-x / 2);
  margin-right: -($gutter-x / 2);
}

// 📦 Bazowa kolumna
[class*="col-"] {
  padding-left: $gutter-x / 2;
  padding-right: $gutter-x / 2;
}

// 📐 Kolumny na breakpointach
@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{($i / $grid-columns) * 100}%;
        max-width: #{($i / $grid-columns) * 100}%;
      }
    }
  }
}



// Breakpointy (zgodne z Bootstrap)
$container-breakpoints: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

// Podstawowy container – zawsze 100%
.container {
  width: 100%;
  padding-left: 16px;
  padding-right: 16px;
  margin-left: auto;
  margin-right: auto;

  // Maksymalne szerokości kontenerów dla różnych breakpointów
  @each $breakpoint, $max-width in $container-breakpoints {
    @media (min-width: #{strip-unit($max-width) + 60}px) {
      max-width: $max-width;
    }
  }
}

// Dodatkowo: kontenery specyficzne dla danego breakpointu (opcjonalnie)
@each $breakpoint, $max-width in $container-breakpoints {
  .container-#{$breakpoint} {
    width: 100%;
    max-width: $max-width;
    padding-left: 16px;
    padding-right: 16px;
    margin-left: auto;
    margin-right: auto;
  }
}





// ----------------------
// Konfiguracja
// ----------------------

$grid-columns: 12;

$grid-gutters: (
  xs: 4px,
  sm: 8px,
  md: 16px,
  lg: 24px
);

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// ----------------------
// ROW
// ----------------------

.row {
  display: flex;
  flex-wrap: wrap;

  // Domyślny gutter (md)
  $default-gutter: map-get($grid-gutters, md);
  margin-left: -$default-gutter / 2;
  margin-right: -$default-gutter / 2;

  > [class*="col-"] {
    padding-left: $default-gutter / 2;
    padding-right: $default-gutter / 2;
  }

  // Gaps
  @each $size, $gap in $grid-gutters {
    &.gap-#{$size} {
      margin-left: -$gap / 2;
      margin-right: -$gap / 2;

      > [class*="col-"] {
        padding-left: $gap / 2;
        padding-right: $gap / 2;
      }
    }
  }

  // No-gutters
  &.no-gutters {
    margin-left: 0;
    margin-right: 0;

    > [class*="col-"] {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

// ----------------------
// COL – full width base
// ----------------------

[class*="col-"] {
  width: 100%;
}

// ----------------------
// COL and OFFSET per breakpoint
// ----------------------

@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{($i / $grid-columns) * 100}%;
        max-width: #{($i / $grid-columns) * 100}%;
      }

      @if $i < $grid-columns {
        .offset-#{$breakpoint}-#{$i} {
          margin-left: #{($i / $grid-columns) * 100%};
        }
      }
    }
  }
}




// ⚙️ Konfiguracja
$grid-columns: 12;

$grid-gutters: (
  xs: 4px,
  sm: 8px,
  md: 16px,
  lg: 24px
);

$grid-breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// 📦 ROW
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -($gutter: map-get($grid-gutters, md)) / 2;
  margin-right: -($gutter: map-get($grid-gutters, md)) / 2;

  // gap-y i gap-x
  @each $size, $gap in $grid-gutters {
    &.gap-#{$size} {
      margin-left: -$gap / 2;
      margin-right: -$gap / 2;

      > [class*="col-"] {
        padding-left: $gap / 2;
        padding-right: $gap / 2;
      }
    }
  }

  // no-gutters = 0 padding
  &.no-gutters {
    margin-left: 0;
    margin-right: 0;

    > [class*="col-"] {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

// 🧱 COL - podstawowy (100% szerokości)
[class*="col-"] {
  width: 100%;
  padding-left: map-get($grid-gutters, md) / 2;
  padding-right: map-get($grid-gutters, md) / 2;
}

// 📐 Kolumny i offsety dla każdego breakpointu
@each $breakpoint, $min-width in $grid-breakpoints {
  @media (min-width: $min-width) {
    @for $i from 1 through $grid-columns {
      // col-[breakpoint]-[i]
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 #{($i / $grid-columns) * 100}%;
        max-width: #{($i / $grid-columns) * 100}%;
      }

      // offset-[breakpoint]-[i]
      @if $i < $grid-columns {
        .offset-#{$breakpoint}-#{$i} {
          margin-left: #{($i / $grid-columns) * 100}%;
        }
      }
    }
  }
}




$button-colors: (
  orange: #e4572e,
  navy: #2f3b94,
  blue: #3e8ed0,
  grey: #666
);

$button-sizes: (
  12: 12px,
  14: 14px,
  16: 16px,
  19: 19px
);

// Wspólna baza przycisku
.button-base {
  padding: 0.4em 1em;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  display: inline-block;
  text-align: center;

  &.disabled,
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }

  // Rozmiary
  @each $size, $font-size in $button-sizes {
    &.size-#{$size} {
      font-size: $font-size;
    }
  }
}

// FILL buttons
@each $name, $color in $button-colors {
  .button-fill-#{quote($name)} {
    @extend .button-base;
    background-color: $color;
    color: white;

    &:hover {
      filter: brightness(0.9);
    }
  }
}

// OUTLINE buttons
@each $name, $color in $button-colors {
  .button-outline-#{quote($name)} {
    @extend .button-base;
    background-color: transparent;
    border: 2px solid $color;
    color: $color;

    &:hover {
      background-color: $color;
      color: white;
    }
  }
}

// TEXT buttons
@each $name, $color in $button-colors {
  .button-text-#{quote($name)} {
    @extend .button-base;
    background-color: transparent;
    color: $color;
    border: none;

    &:hover {
      background-color: rgba($color, 0.1);
    }
  }
}


$button-colors: (
  orange: #e4572e,
  navy: #2f3b94,
  blue: #3e8ed0,
  grey: #666
);

$button-sizes: (
  12: 12px,
  14: 14px,
  16: 16px,
  19: 19px
);

// 🧱 Wspólna podstawa
.button-base {
  padding: 0.4em 1em;
  border: none;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  display: inline-block;
  text-align: center;

  &.disabled,
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }

  // Rozmiary
  @each $size, $font-size in $button-sizes {
    &.size-#{$size} {
      font-size: $font-size;
    }
  }
}

// 🎨 Wariant FILL
@each $name, $color in $button-colors {
  .button-fill-#{$name} {
    @extend .button-base;
    background-color: $color;
    color: white;

    &:hover {
      filter: brightness(0.9);
    }
  }
}

// ✏️ Wariant TEXT
@each $name, $color in $button-colors {
  .button-text-#{$name} {
    @extend .button-base;
    background-color: transparent;
    color: $color;

    &:hover {
      background-color: rgba($color, 0.1);
    }
  }
}



$button-heights: (
  12: 28px,
  14: 32px,
  16: 36px,
  19: 44px
);

.button-outline {
  border: 2px solid transparent;
  background-color: transparent;
  padding: 0 1em; // poziome tylko, brak pionowego
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;

  // Wymuszamy wysokość przez flexbox + height
  @each $size, $height in $button-heights {
    &.size-#{$size} {
      font-size: #{$size}px;
      height: $height;
    }
  }

  // Kolory (przykład z poprzedniego SCSS)
  @each $name, $color in $button-colors {
    &.outline-#{$name} {
      color: $color;
      border-color: $color;

      &:hover {
        background-color: $color;
        color: white;
      }
    }
  }

  // Styl dla przycisków nieaktywnych
  &.disabled,
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }
}

@import 'path/to/file'; // bez .scss
// ---------------------------------------------
// Base Colors
// ---------------------------------------------
$white:       #ffffff;
$black:       #0d0b04;

$grey-01:     #f3f4f1;
$grey-02:     #a6a99b;
$grey-03:     #40383b;
$grey-04:     #111210;

// ---------------------------------------------
// Accent Colors with Opacities
// ---------------------------------------------

$violet-10:   #f1e9ff; // 10% opacity
$violet-50:   #d5beff; // 50% opacity
$violet:      #7724ff;
$violet-150:  #3c1280;

$sky-10:      #e4f5ff; // 10%
$sky-50:      #bee8fe; // 50%
$sky:         #89d5fd;
$sky-150:     #2585a7b;

$maroon-10:   #f8e6f5; // 10%
$maroon-50:   #ff90c7; // 50%
$maroon:      #4d0020;
$maroon-150:  #340016;

$raspberry-50:#f86bd5; // 50%
$raspberry:   #d40199;
$raspberry-150: #bf096a;

$blush-50:    #fabefe;
$blush:       #f689fd;
$blush-150:   #be0cb3;

$sun-10:      #ffecf5; // 10%
$sun-50:      #ffee73;
$sun:         #ffe100;
$sun-150:     #aa8500;

// ---------------------------------------------
// Functional Colors
// ---------------------------------------------

$green-01:    #cdf4d8;
$green-02:    #65ff59;
$green-03:    #128f00;
$red:         #ce2323;



// Mapa kolorów – łatwa rozbudowa
$button-colors: (
  orange: #e4572e,
  blue: #3e8ed0,
  navy: #2f3b94,
  gray: #666
);

// Mapa rozmiarów
$button-sizes: (
  12: 12px,
  14: 14px,
  16: 16px,
  19: 19px
);

.button-outline {
  border: 2px solid transparent;
  background-color: transparent;
  padding: 0.4em 1em;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  display: inline-block;

  // Generowanie klas kolorów
  @each $name, $color in $button-colors {
    &.outline-#{$name} {
      color: $color;
      border-color: $color;

      &:hover {
        background-color: $color;
        color: white;
      }
    }
  }

  // Generowanie klas rozmiarów
  @each $size, $font-size in $button-sizes {
    &.size-#{$size} {
      font-size: $font-size;
    }
  }

  // Opcjonalnie: disabled
  &.disabled,
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }
}




// Container for rows – flex-based layout
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -8px;
  margin-right: -8px;
}

// Base style for every column
.col {
  padding: 8px;
  box-sizing: border-box;
}

// Fixed 12-column grid system (percent-based widths)
.col-1  { flex: 0 0 8.3333%;  max-width: 8.3333%; }
.col-2  { flex: 0 0 16.6667%; max-width: 16.6667%; }
.col-3  { flex: 0 0 25%;      max-width: 25%; }
.col-4  { flex: 0 0 33.3333%; max-width: 33.3333%; }
.col-5  { flex: 0 0 41.6667%; max-width: 41.6667%; }
.col-6  { flex: 0 0 50%;      max-width: 50%; }
.col-7  { flex: 0 0 58.3333%; max-width: 58.3333%; }
.col-8  { flex: 0 0 66.6667%; max-width: 66.6667%; }
.col-9  { flex: 0 0 75%;      max-width: 75%; }
.col-10 { flex: 0 0 83.3333%; max-width: 83.3333%; }
.col-11 { flex: 0 0 91.6667%; max-width: 91.6667%; }
.col-12 { flex: 0 0 100%;     max-width: 100%; }


// Main row class using Flexbox
.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -8px;
  margin-right: -8px;
}

// Column with padding and flexible sizing
.col {
  padding: 8px;
  box-sizing: border-box;
  flex-grow: 1;
}

// Example column width classes (12-column system)
@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 #{($i / 12) * 100}%;
    max-width: #{($i / 12) * 100}%;
  }
}




import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-dynamic-control',
  templateUrl: './dynamic-control.component.html',
})
export class DynamicControlComponent {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      name: ['', Validators.required],
      provideDetails: [false]
    });

    this.form.get('provideDetails')?.valueChanges.subscribe((checked: boolean) => {
      if (checked) {
        this.addDetailsGroup();
      } else {
        this.removeDetailsGroup();
      }
    });
  }

  private addDetailsGroup(): void {
    if (!this.form.contains('details')) {
      const detailsGroup = this.fb.group({
        age: [null, [Validators.required, Validators.min(0)]],
        address: ['', Validators.required]
      });

      this.form.addControl('details', detailsGroup);
    }
  }

  private removeDetailsGroup(): void {
    if (this.form.contains('details')) {
      this.form.removeControl('details');
    }
  }

  onSubmit(): void {
    if (this.form.valid) {
      console.log('Form value:', this.form.value);
    } else {
      this.form.markAllAsTouched();
    }
  }
}


<!-- Wyświetl dodatkowe pola, jeśli grupa "details" została dodana -->
<div *ngIf="form.contains('details')" [formGroupName]="'details'">
  <label>
    Wiek:
    <input type="number" formControlName="age">
  </label>

  <label>
    Adres:
    <input type="text" formControlName="address">
  </label>
</div>
